%!PS-Adobe-3.1 EPSF-3.0
%%Title: (Scilab - Logo d\216f cmjn.eps)
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: Pierre Laurent
%%CreationDate: 13/09/05
%%BoundingBox: 0 0 194 97
%%HiResBoundingBox: 0 0 193.1578 96.1817
%%CropBox: 0 0 193.1578 96.1817
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Scilab - Logo d\216f cmjn.eps) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -96.1817 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 96.1817 li
193.158 96.1817 li
193.158 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
193.158 0 mo
193.158 93.5435 li
60.4957 93.5435 li
60.4957 0 li
193.158 0 li
false sop
0.6235 0.4588 0.4196 0.8078 cmyk
f
16.9419 60.8438 mo
16.8082 61.1114 16.6294 61.2901 16.4507 61.2901 cv
16.1832 61.2901 13.4126 59.3262 10.1919 59.3262 cv
8.13379 59.3262 5.98633 60.1294 5.98633 62.8072 cv
5.98633 66.1988 11.2212 66.8238 15.1548 69.7247 cv
17.4332 71.4205 18.9966 73.7862 18.9966 77.1778 cv
18.9966 82.8414 14.9771 86.5767 9.3418 86.5767 cv
4.77979 86.5767 0 84.6202 0 83.9092 cv
0 83.7754 0.13379 83.4644 0.223145 83.1973 cv
1.25098 80.2569 li
1.34034 79.9893 1.56348 79.8111 1.74219 79.8111 cv
2.01026 79.8111 5.31592 81.7745 9.16309 81.7745 cv
11.6685 81.7745 13.19 80.4356 13.19 77.6685 cv
13.19 73.6963 8.62598 73.295 4.06495 70.5279 cv
1.69727 69.0997 0.178711 67.315 0.178711 63.6104 cv
0.178711 57.1915 4.82471 54.5235 10.0132 54.5235 cv
14.2613 54.5235 18.6402 56.4805 18.6402 57.2359 cv
18.6402 57.3697 18.5953 57.5474 18.4166 57.9029 cv
16.9419 60.8438 li
0.6235 0.4588 0.4196 0.8078 cmyk
f
40.2535 83.7623 mo
40.2974 83.896 40.3863 84.0748 40.3863 84.209 cv
40.3863 85.2813 36.7681 86.5767 34.0884 86.5767 cv
27.8785 86.5767 24.1705 82.7794 24.1705 75.2662 cv
24.1705 67.7569 27.9673 63.0674 34.5787 63.0674 cv
36.9918 63.0674 40.9234 64.4078 40.9234 65.7925 cv
40.9234 65.9268 40.8335 66.0606 40.7896 66.1944 cv
39.1363 69.0904 li
39.0464 69.1788 38.9576 69.3121 38.8238 69.3121 cv
38.3765 69.3121 36.9029 67.5347 34.5787 67.5347 cv
31.5416 67.5347 30.2017 69.8453 30.2017 74.9556 cv
30.2017 79.8433 31.3628 82.1094 34.8033 82.1094 cv
37.0816 82.1094 37.9742 80.5987 38.7789 80.5987 cv
38.9126 80.5987 39.0025 80.6876 39.0914 80.8208 cv
40.2535 83.7623 li
0.6235 0.4588 0.4196 0.8078 cmyk
f
54.4918 85.7676 mo
54.4918 86.2588 54.4019 86.4053 53.8648 86.4053 cv
49.4332 86.4053 li
48.896 86.4053 48.8062 86.2588 48.8062 85.7676 cv
48.8062 67.9258 li
45.3658 67.9258 li
44.8306 67.9258 44.7408 67.792 44.7408 67.3033 cv
44.7408 64.4156 li
44.7408 63.9268 44.8306 63.7935 45.3658 63.7935 cv
53.8648 63.7935 li
54.4019 63.7935 54.4918 63.9268 54.4918 64.4156 cv
54.4918 85.7676 li
0.6235 0.4588 0.4196 0.8078 cmyk
f
186.852 57.0108 mo
188.417 57.0108 189.687 55.7413 189.687 54.1763 cv
189.687 52.6104 188.417 51.3414 186.852 51.3414 cv
185.286 51.3414 184.017 52.6104 184.017 54.1763 cv
184.017 55.7413 185.286 57.0108 186.852 57.0108 cv
0.0039 0 0.00779999 0 cmyk
f
180.328 47.8033 mo
181.895 47.8033 183.163 46.5347 183.163 44.9688 cv
183.163 43.4034 181.895 42.1343 180.328 42.1343 cv
178.763 42.1343 177.493 43.4034 177.493 44.9688 cv
177.493 46.5347 178.763 47.8033 180.328 47.8033 cv
0 0 0 0 cmyk
f
172.735 39.0445 mo
174.3 39.0445 175.569 37.775 175.569 36.21 cv
175.569 34.6446 174.3 33.375 172.735 33.375 cv
171.17 33.375 169.899 34.6446 169.899 36.21 cv
169.899 37.775 171.17 39.0445 172.735 39.0445 cv
0 0 0 0 cmyk
f
153.766 23.0601 mo
155.332 23.0601 156.601 21.7911 156.601 20.2251 cv
156.601 18.6602 155.332 17.3907 153.766 17.3907 cv
152.2 17.3907 150.931 18.6602 150.931 20.2251 cv
150.931 21.7911 152.2 23.0601 153.766 23.0601 cv
0 0 0 0 cmyk
f
142.016 16.1226 mo
143.582 16.1226 144.851 14.8536 144.851 13.2876 cv
144.851 11.7227 143.582 10.4532 142.016 10.4532 cv
140.45 10.4532 139.181 11.7227 139.181 13.2876 cv
139.181 14.8536 140.45 16.1226 142.016 16.1226 cv
0 0 0 0 cmyk
f
175.901 56.6851 mo
177.467 56.6851 178.736 55.4161 178.736 53.8502 cv
178.736 52.2852 177.467 51.0157 175.901 51.0157 cv
174.336 51.0157 173.066 52.2852 173.066 53.8502 cv
173.066 55.4161 174.336 56.6851 175.901 56.6851 cv
0.0039 0 0.00779999 0 cmyk
f
169.078 48.1382 mo
170.645 48.1382 171.913 46.8692 171.913 45.3033 cv
171.913 43.7383 170.645 42.4688 169.078 42.4688 cv
167.513 42.4688 166.243 43.7383 166.243 45.3033 cv
166.243 46.8692 167.513 48.1382 169.078 48.1382 cv
0 0 0 0 cmyk
f
161.095 40.0445 mo
162.659 40.0445 163.929 38.775 163.929 37.21 cv
163.929 35.6446 162.659 34.375 161.095 34.375 cv
159.528 34.375 158.259 35.6446 158.259 37.21 cv
158.259 38.775 159.528 40.0445 161.095 40.0445 cv
0 0 0 0 cmyk
f
151.766 32.4664 mo
153.332 32.4664 154.601 31.1973 154.601 29.6319 cv
154.601 28.066 153.332 26.7969 151.766 26.7969 cv
150.2 26.7969 148.931 28.066 148.931 29.6319 cv
148.931 31.1973 150.2 32.4664 151.766 32.4664 cv
0 0 0 0 cmyk
f
140.938 25.5914 mo
142.504 25.5914 143.772 24.3223 143.772 22.7569 cv
143.772 21.191 142.504 19.9219 140.938 19.9219 cv
139.372 19.9219 138.104 21.191 138.104 22.7569 cv
138.104 24.3223 139.372 25.5914 140.938 25.5914 cv
0 0 0 0 cmyk
f
128.313 19.6539 mo
129.879 19.6539 131.147 18.3848 131.147 16.8194 cv
131.147 15.2535 129.879 13.9844 128.313 13.9844 cv
126.747 13.9844 125.479 15.2535 125.479 16.8194 cv
125.479 18.3848 126.747 19.6539 128.313 19.6539 cv
0 0 0 0 cmyk
f
165.345 57.4507 mo
166.909 57.4507 168.179 56.1817 168.179 54.6158 cv
168.179 53.0508 166.909 51.7813 165.345 51.7813 cv
163.778 51.7813 162.509 53.0508 162.509 54.6158 cv
162.509 56.1817 163.778 57.4507 165.345 57.4507 cv
0.0039 0 0.00779999 0 cmyk
f
158.203 49.5132 mo
159.77 49.5132 161.038 48.2442 161.038 46.6783 cv
161.038 45.1133 159.77 43.8438 158.203 43.8438 cv
156.638 43.8438 155.368 45.1133 155.368 46.6783 cv
155.368 48.2442 156.638 49.5132 158.203 49.5132 cv
0 0 0 0 cmyk
f
149.75 42.0289 mo
151.316 42.0289 152.585 40.7598 152.585 39.1944 cv
152.585 37.6285 151.316 36.3594 149.75 36.3594 cv
148.185 36.3594 146.916 37.6285 146.916 39.1944 cv
146.916 40.7598 148.185 42.0289 149.75 42.0289 cv
0 0 0 0 cmyk
f
139.86 35.2164 mo
141.425 35.2164 142.694 33.9473 142.694 32.3819 cv
142.694 30.816 141.425 29.5469 139.86 29.5469 cv
138.295 29.5469 137.024 30.816 137.024 32.3819 cv
137.024 33.9473 138.295 35.2164 139.86 35.2164 cv
0 0 0 0 cmyk
f
128.295 29.2432 mo
129.861 29.2432 131.13 27.9742 131.13 26.4087 cv
131.13 24.8433 129.861 23.5738 128.295 23.5738 cv
126.73 23.5738 125.461 24.8433 125.461 26.4087 cv
125.461 27.9742 126.73 29.2432 128.295 29.2432 cv
0 0 0 0 cmyk
f
114.688 24.4908 mo
116.254 24.4908 117.522 23.2222 117.522 21.6563 cv
117.522 20.0909 116.254 18.8218 114.688 18.8218 cv
113.122 18.8218 111.854 20.0909 111.854 21.6563 cv
111.854 23.2222 113.122 24.4908 114.688 24.4908 cv
0 0 0 0 cmyk
f
155.25 59.2476 mo
156.816 59.2476 158.085 57.9786 158.085 56.4126 cv
158.085 54.8477 156.816 53.5782 155.25 53.5782 cv
153.685 53.5782 152.416 54.8477 152.416 56.4126 cv
152.416 57.9786 153.685 59.2476 155.25 59.2476 cv
0.0039 0 0.00779999 0 cmyk
f
147.72 51.835 mo
149.284 51.835 150.554 50.5655 150.554 49 cv
150.554 47.4346 149.284 46.1656 147.72 46.1656 cv
146.153 46.1656 144.884 47.4346 144.884 49 cv
144.884 50.5655 146.153 51.835 147.72 51.835 cv
0 0 0 0 cmyk
f
138.813 45.0289 mo
140.379 45.0289 141.647 43.7598 141.647 42.1944 cv
141.647 40.6285 140.379 39.3594 138.813 39.3594 cv
137.247 39.3594 135.979 40.6285 135.979 42.1944 cv
135.979 43.7598 137.247 45.0289 138.813 45.0289 cv
0 0 0 0 cmyk
f
128.313 38.9976 mo
129.879 38.9976 131.147 37.7286 131.147 36.1626 cv
131.147 34.5977 129.879 33.3282 128.313 33.3282 cv
126.747 33.3282 125.479 34.5977 125.479 36.1626 cv
125.479 37.7286 126.747 38.9976 128.313 38.9976 cv
0 0 0 0 cmyk
f
115.891 34.0757 mo
117.457 34.0757 118.726 32.8067 118.726 31.2408 cv
118.726 29.6753 117.457 28.4063 115.891 28.4063 cv
114.325 28.4063 113.056 29.6753 113.056 31.2408 cv
113.056 32.8067 114.325 34.0757 115.891 34.0757 cv
0 0 0 0 cmyk
f
101.163 30.8204 mo
102.729 30.8204 103.999 29.5513 103.999 27.9859 cv
103.999 26.42 102.729 25.1514 101.163 25.1514 cv
99.5982 25.1514 98.3287 26.42 98.3287 27.9859 cv
98.3287 29.5513 99.5982 30.8204 101.163 30.8204 cv
0 0 0 0 cmyk
f
145.641 62.0132 mo
147.207 62.0132 148.476 60.7442 148.476 59.1783 cv
148.476 57.6133 147.207 56.3438 145.641 56.3438 cv
144.075 56.3438 142.806 57.6133 142.806 59.1783 cv
142.806 60.7442 144.075 62.0132 145.641 62.0132 cv
0.0039 0 0.00779999 0 cmyk
f
136.625 65.7007 mo
138.191 65.7007 139.46 64.4317 139.46 62.8658 cv
139.46 61.3008 138.191 60.0313 136.625 60.0313 cv
135.06 60.0313 133.791 61.3008 133.791 62.8658 cv
133.791 64.4317 135.06 65.7007 136.625 65.7007 cv
0.0039 0 0.00779999 0 cmyk
f
137.72 55.1382 mo
139.284 55.1382 140.554 53.8692 140.554 52.3033 cv
140.554 50.7383 139.284 49.4688 137.72 49.4688 cv
136.153 49.4688 134.884 50.7383 134.884 52.3033 cv
134.884 53.8692 136.153 55.1382 137.72 55.1382 cv
0 0 0 0 cmyk
f
128.313 48.9751 mo
129.879 48.9751 131.147 47.7066 131.147 46.1407 cv
131.147 44.5752 129.879 43.3062 128.313 43.3062 cv
126.747 43.3062 125.479 44.5752 125.479 46.1407 cv
125.479 47.7066 126.747 48.9751 128.313 48.9751 cv
0 0 0 0 cmyk
f
117.125 43.8414 mo
118.691 43.8414 119.96 42.5723 119.96 41.0069 cv
119.96 39.441 118.691 38.1719 117.125 38.1719 cv
115.56 38.1719 114.291 39.441 114.291 41.0069 cv
114.291 42.5723 115.56 43.8414 117.125 43.8414 cv
0 0 0 0 cmyk
f
103.828 40.2164 mo
105.395 40.2164 106.663 38.9473 106.663 37.3819 cv
106.663 35.816 105.395 34.5469 103.828 34.5469 cv
102.263 34.5469 100.993 35.816 100.993 37.3819 cv
100.993 38.9473 102.263 40.2164 103.828 40.2164 cv
0 0 0 0 cmyk
f
87.7193 38.96 mo
89.2837 38.96 90.5533 37.6905 90.5533 36.125 cv
90.5533 34.5596 89.2837 33.2906 87.7193 33.2906 cv
86.1529 33.2906 84.8834 34.5596 84.8834 36.125 cv
84.8834 37.6905 86.1529 38.96 87.7193 38.96 cv
0 0 0 0 cmyk
f
128.298 59.3257 mo
129.862 59.3257 131.132 58.0567 131.132 56.4908 cv
131.132 54.9258 129.862 53.6563 128.298 53.6563 cv
126.732 53.6563 125.462 54.9258 125.462 56.4908 cv
125.462 58.0567 126.732 59.3257 128.298 59.3257 cv
0 0 0 0 cmyk
f
118.358 53.8873 mo
119.925 53.8873 121.194 52.6182 121.194 51.0528 cv
121.194 49.4869 119.925 48.2183 118.358 48.2183 cv
116.794 48.2183 115.524 49.4869 115.524 51.0528 cv
115.524 52.6182 116.794 53.8873 118.358 53.8873 cv
0 0 0 0 cmyk
f
106.438 49.8414 mo
108.004 49.8414 109.272 48.5723 109.272 47.0069 cv
109.272 45.441 108.004 44.1719 106.438 44.1719 cv
104.872 44.1719 103.604 45.441 103.604 47.0069 cv
103.604 48.5723 104.872 49.8414 106.438 49.8414 cv
0 0 0 0 cmyk
f
92.0777 47.835 mo
93.6441 47.835 94.9126 46.5655 94.9126 45 cv
94.9126 43.4346 93.6441 42.1656 92.0777 42.1656 cv
90.5123 42.1656 89.2427 43.4346 89.2427 45 cv
89.2427 46.5655 90.5123 47.835 92.0777 47.835 cv
0 0 0 0 cmyk
f
74.4371 49.4126 mo
76.0035 49.4126 77.272 48.1441 77.272 46.5782 cv
77.272 45.0127 76.0035 43.7437 74.4371 43.7437 cv
72.8716 43.7437 71.6031 45.0127 71.6031 46.5782 cv
71.6031 48.1441 72.8716 49.4126 74.4371 49.4126 cv
0 0 0 0 cmyk
f
180.329 47.8018 mo
181.895 47.8018 183.163 46.5323 183.163 44.9668 cv
183.163 43.4014 181.895 42.1319 180.329 42.1319 cv
178.764 42.1319 177.494 43.4014 177.494 44.9668 cv
177.494 46.5323 178.764 47.8018 180.329 47.8018 cv
0.0431 0.0667 0.0235001 0 cmyk
f
172.732 39.0425 mo
174.298 39.0425 175.566 37.7735 175.566 36.2076 cv
175.566 34.6426 174.298 33.3731 172.732 33.3731 cv
171.166 33.3731 169.897 34.6426 169.897 36.2076 cv
169.897 37.7735 171.166 39.0425 172.732 39.0425 cv
0.0431 0.2902 0.0941 0.0039 cmyk
f
163.938 30.7652 mo
165.503 30.7652 166.772 29.4961 166.772 27.9307 cv
166.772 26.3653 165.503 25.0958 163.938 25.0958 cv
162.372 25.0958 161.104 26.3653 161.104 27.9307 cv
161.104 29.4961 162.372 30.7652 163.938 30.7652 cv
0.051 0.5333 0.298 0.00779999 cmyk
f
153.769 23.0621 mo
155.334 23.0621 156.604 21.793 156.604 20.2276 cv
156.604 18.6617 155.334 17.3931 153.769 17.3931 cv
152.203 17.3931 150.934 18.6617 150.934 20.2276 cv
150.934 21.793 152.203 23.0621 153.769 23.0621 cv
0.113701 0.7608 0.5725 0.0196 cmyk
f
142.019 16.1241 mo
143.585 16.1241 144.854 14.8555 144.854 13.2896 cv
144.854 11.7242 143.585 10.4551 142.019 10.4551 cv
140.453 10.4551 139.184 11.7242 139.184 13.2896 cv
139.184 14.8555 140.453 16.1241 142.019 16.1241 cv
0.1529 0.8902 0.7255 0.0353001 cmyk
f
128.313 10.1851 mo
129.879 10.1851 131.147 8.91602 131.147 7.3501 cv
131.147 5.78516 129.879 4.51563 128.313 4.51563 cv
126.747 4.51563 125.479 5.78516 125.479 7.3501 cv
125.479 8.91602 126.747 10.1851 128.313 10.1851 cv
0.1686 0.9294 0.749 0.0431 cmyk
f
113.438 15.0533 mo
115.004 15.0533 116.272 13.7847 116.272 12.2188 cv
116.272 10.6534 115.004 9.38428 113.438 9.38428 cv
111.872 9.38428 110.604 10.6534 110.604 12.2188 cv
110.604 13.7847 111.872 15.0533 113.438 15.0533 cv
0 0 0 0 cmyk
f
98.3746 21.6226 mo
99.941 21.6226 101.21 20.3536 101.21 18.7876 cv
101.21 17.2227 99.941 15.9532 98.3746 15.9532 cv
96.8091 15.9532 95.5406 17.2227 95.5406 18.7876 cv
95.5406 20.3536 96.8091 21.6226 98.3746 21.6226 cv
0 0 0 0 cmyk
f
83.2027 30.3033 mo
84.7691 30.3033 86.0376 29.0347 86.0376 27.4688 cv
86.0376 25.9034 84.7691 24.6343 83.2027 24.6343 cv
81.6373 24.6343 80.3677 25.9034 80.3677 27.4688 cv
80.3677 29.0347 81.6373 30.3033 83.2027 30.3033 cv
0 0 0 0 cmyk
f
67.7027 41.96 mo
69.2691 41.96 70.5376 40.6905 70.5376 39.125 cv
70.5376 37.5596 69.2691 36.2906 67.7027 36.2906 cv
66.1373 36.2906 64.8677 37.5596 64.8677 39.125 cv
64.8677 40.6905 66.1373 41.96 67.7027 41.96 cv
0 0 0 0 cmyk
f
51.6402 58.7725 mo
53.2066 58.7725 54.4752 57.503 54.4752 55.9376 cv
54.4752 54.3721 53.2066 53.1031 51.6402 53.1031 cv
50.0748 53.1031 48.8052 54.3721 48.8052 55.9376 cv
48.8052 57.503 50.0748 58.7725 51.6402 58.7725 cv
0 0 0 0 cmyk
f
77.2662 94.5733 mo
77.3111 94.7969 77.356 94.7969 77.356 94.9307 cv
77.356 95.5562 74.9878 96.1817 72.8423 96.1817 cv
67.3365 96.1817 67.3365 91.6695 67.3365 87.5582 cv
67.3365 64.7657 li
67.3365 64.0953 67.65 64.0953 68.1871 63.9615 cv
71.9478 63.2017 li
72.0816 63.2017 72.4849 63.0674 72.5738 63.0674 cv
72.9322 63.0674 73.022 63.2461 73.022 64.0064 cv
73.022 88.3624 li
73.022 89.793 73.022 91.0445 74.273 91.0445 cv
75.1666 91.0445 75.7466 90.6416 76.0152 90.6416 cv
76.1939 90.6416 76.3277 90.7315 76.3726 90.9102 cv
77.2662 94.5733 li
0 0 0 0 cmyk
f
93.6998 90.3565 mo
93.1626 90.8907 91.9986 92.0494 90.3433 92.0494 cv
88.6431 92.0494 87.3902 90.7569 87.3902 89.0196 cv
87.3902 85.0962 92.5806 85.4551 93.6998 85.4551 cv
93.6998 90.3565 li
cp
99.8199 94.6265 mo
100.044 94.5376 100.223 94.4044 100.223 94.2266 cv
100.223 93.3379 99.0611 92.7603 99.0611 88.4405 cv
99.0611 79.8355 li
99.0611 75.2188 96.9615 72.6724 91.3726 72.6724 cv
87.9273 72.6724 83.5035 73.7447 83.5035 74.772 cv
83.5035 74.9502 83.5474 75.1294 83.6373 75.3077 cv
84.5298 78.0235 li
84.5748 78.2002 84.7535 78.4654 84.9771 78.4654 cv
85.5582 78.4654 88.0162 77.1397 90.522 77.1397 cv
93.3414 77.1397 93.6998 78.421 93.6998 80.4097 cv
93.6998 81.7794 li
90.1646 81.7794 82.0289 81.7794 82.0289 89.3316 cv
82.0289 93.5157 84.6197 96.1817 88.732 96.1817 cv
92.0884 96.1817 93.6548 94.4044 94.5484 93.5157 cv
94.772 94.6265 95.4419 96.1817 95.8443 96.1817 cv
96.022 96.1817 96.2457 96.0484 96.4244 96.004 cv
99.8199 94.6265 li
0 0 0 0 cmyk
f
113.892 78.6504 mo
114.473 78.1617 115.456 77.1397 116.975 77.1397 cv
120.368 77.1397 120.994 80.5611 120.994 84.1158 cv
120.994 87.5821 120.19 91.7144 116.125 91.7144 cv
114.92 91.7144 114.16 91.003 113.892 90.7813 cv
113.892 78.6504 li
cp
113.609 64.0147 mo
113.609 63.2481 113.521 63.0674 113.162 63.0674 cv
113.072 63.0674 112.67 63.2027 112.534 63.2027 cv
108.774 63.9693 li
108.237 64.1045 107.924 64.1045 107.924 64.7813 cv
107.924 89.7588 li
107.924 90.6919 107.924 91.625 107.745 92.5186 cv
107.433 94.0372 106.941 94.4395 106.941 94.8414 cv
106.941 95.0201 107.165 95.1539 107.388 95.1988 cv
110.968 96.0923 li
111.147 96.1368 111.371 96.1817 111.595 96.1817 cv
112.267 96.1817 112.714 94.7071 112.894 94.2159 cv
113.609 94.9307 114.592 96.1817 117.138 96.1817 cv
123.129 96.1817 126.397 91.3584 126.397 83.8047 cv
126.397 78.0284 124.651 72.6724 118.567 72.6724 cv
116.111 72.6724 114.503 73.9678 113.609 74.6377 cv
113.609 64.0147 li
0 0 0 0 cmyk
f
110.4 12.2149 mo
110.4 10.5328 111.762 9.18165 113.443 9.18165 cv
115.116 9.18165 116.477 10.5328 116.477 12.2149 cv
116.477 13.897 115.116 15.2574 113.443 15.2574 cv
111.762 15.2574 110.4 13.897 110.4 12.2149 cv
0.1686 0.9294 0.749 0.0431 cmyk
f
95.1304 18.7793 mo
95.1304 16.9815 96.5826 15.5479 98.3814 15.5479 cv
100.161 15.5479 101.614 16.9815 101.614 18.7793 cv
101.614 20.5777 100.161 22.0303 98.3814 22.0303 cv
96.5826 22.0303 95.1304 20.5777 95.1304 18.7793 cv
0.1686 0.9294 0.749 0.0431 cmyk
f
79.7613 27.4561 mo
79.7613 25.5411 81.3052 24.025 83.2203 24.025 cv
85.107 24.025 86.6509 25.5411 86.6509 27.4561 cv
86.6509 29.3707 85.107 30.9151 83.2203 30.9151 cv
81.3052 30.9151 79.7613 29.3707 79.7613 27.4561 cv
0.1686 0.9294 0.749 0.0431 cmyk
f
64.0533 39.1089 mo
64.0533 37.0777 65.688 35.4795 67.7203 35.4795 cv
69.7134 35.4795 71.3492 37.0777 71.3492 39.1089 cv
71.3492 41.1402 69.7134 42.7754 67.7203 42.7754 cv
65.688 42.7754 64.0533 41.1402 64.0533 39.1089 cv
0.1686 0.9294 0.749 0.0431 cmyk
f
125.295 56.4859 mo
125.295 54.8233 126.641 53.4859 128.304 53.4859 cv
129.958 53.4859 131.304 54.8233 131.304 56.4859 cv
131.304 58.1485 129.958 59.4937 128.304 59.4937 cv
126.641 59.4937 125.295 58.1485 125.295 56.4859 cv
0.0167001 0.1333 0.1667 0 cmyk
f
115.183 51.0464 mo
115.183 49.2867 116.604 47.8809 118.364 47.8809 cv
120.108 47.8809 121.53 49.2867 121.53 51.0464 cv
121.53 52.8062 120.108 54.2276 118.364 54.2276 cv
116.604 54.2276 115.183 52.8062 115.183 51.0464 cv
0.0333 0.266701 0.3333 0 cmyk
f
103.094 46.9961 mo
103.094 45.1397 104.592 43.6651 106.449 43.6651 cv
108.282 43.6651 109.779 45.1397 109.779 46.9961 cv
109.779 48.8526 108.282 50.3511 106.449 50.3511 cv
104.592 50.3511 103.094 48.8526 103.094 46.9961 cv
0.0500001 0.4 0.5 0 cmyk
f
88.566 44.9869 mo
88.566 43.0333 90.1412 41.4898 92.0943 41.4898 cv
94.0162 41.4898 95.5914 43.0333 95.5914 44.9869 cv
95.5914 46.9405 94.0162 48.5152 92.0943 48.5152 cv
90.1412 48.5152 88.566 46.9405 88.566 44.9869 cv
0.0667 0.5333 0.6667 0 cmyk
f
70.7584 46.5562 mo
70.7584 44.5059 72.4087 42.8936 74.4595 42.8936 cv
76.4712 42.8936 78.1216 44.5059 78.1216 46.5562 cv
78.1216 48.6065 76.4712 50.2574 74.4595 50.2574 cv
72.4087 50.2574 70.7584 48.6065 70.7584 46.5562 cv
0.0833 0.6667 0.8333 0 cmyk
f
140.938 25.7276 mo
139.295 25.7276 137.964 24.3975 137.964 22.754 cv
137.964 21.1109 139.295 19.7872 140.938 19.7872 cv
142.574 19.7872 143.904 21.1109 143.904 22.754 cv
143.904 24.3975 142.574 25.7276 140.938 25.7276 cv
0.113701 0.7608 0.5725 0.0196 cmyk
f
128.299 29.5127 mo
126.578 29.5127 125.187 28.1211 125.187 26.4004 cv
125.187 24.6802 126.578 23.3013 128.299 23.3013 cv
130.007 23.3013 131.397 24.6802 131.397 26.4004 cv
131.397 28.1211 130.007 29.5127 128.299 29.5127 cv
0.113701 0.7608 0.5725 0.0196 cmyk
f
115.899 34.4815 mo
114.102 34.4815 112.649 33.0289 112.649 31.231 cv
112.649 29.4322 114.102 27.9986 115.899 27.9986 cv
117.679 27.9986 119.132 29.4322 119.132 31.231 cv
119.132 33.0289 117.679 34.4815 115.899 34.4815 cv
0.113701 0.7608 0.5725 0.0196 cmyk
f
103.841 40.7613 mo
101.966 40.7613 100.452 39.2476 100.452 37.3721 cv
100.452 35.4957 101.966 34.0074 103.841 34.0074 cv
105.692 34.0074 107.206 35.4957 107.206 37.3721 cv
107.206 39.2476 105.692 40.7613 103.841 40.7613 cv
0.113701 0.7608 0.5725 0.0196 cmyk
f
151.766 32.5679 mo
150.142 32.5679 148.827 31.253 148.827 29.629 cv
148.827 28.0054 150.142 26.6949 151.766 26.6949 cv
153.384 26.6949 154.699 28.0054 154.699 29.629 cv
154.699 31.253 153.384 32.5679 151.766 32.5679 cv
0.051 0.5333 0.298 0.00779999 cmyk
f
139.862 35.419 mo
138.181 35.419 136.819 34.0582 136.819 32.3765 cv
136.819 30.6944 138.181 29.3433 139.862 29.3433 cv
141.534 29.3433 142.896 30.6944 142.896 32.3765 cv
142.896 34.0582 141.534 35.419 139.862 35.419 cv
0.051 0.5333 0.298 0.00779999 cmyk
f
128.32 39.3047 mo
126.58 39.3047 125.174 37.8985 125.174 36.1583 cv
125.174 34.4185 126.58 33.0254 128.32 33.0254 cv
130.046 33.0254 131.453 34.4185 131.453 36.1583 cv
131.453 37.8985 130.046 39.3047 128.32 39.3047 cv
0.051 0.5333 0.298 0.00779999 cmyk
f
117.133 44.2471 mo
115.335 44.2471 113.883 42.7945 113.883 40.9961 cv
113.883 39.1978 115.335 37.7642 117.133 37.7642 cv
118.912 37.7642 120.365 39.1978 120.365 40.9961 cv
120.365 42.7945 118.912 44.2471 117.133 44.2471 cv
0.051 0.5333 0.298 0.00779999 cmyk
f
161.098 40.1094 mo
159.493 40.1094 158.193 38.8101 158.193 37.2056 cv
158.193 35.6011 159.493 34.3042 161.098 34.3042 cv
162.699 34.3042 163.999 35.6011 163.999 37.2056 cv
163.999 38.8101 162.699 40.1094 161.098 40.1094 cv
0.0431 0.2902 0.0941 0.0039 cmyk
f
149.754 42.1612 mo
148.11 42.1612 146.78 40.8316 146.78 39.1885 cv
146.78 37.545 148.11 36.2208 149.754 36.2208 cv
151.391 36.2208 152.721 37.545 152.721 39.1885 cv
152.721 40.8316 151.391 42.1612 149.754 42.1612 cv
0.0431 0.2902 0.0941 0.0039 cmyk
f
138.82 45.2339 mo
137.138 45.2339 135.778 43.8736 135.778 42.191 cv
135.778 40.5098 137.138 39.1578 138.82 39.1578 cv
140.493 39.1578 141.854 40.5098 141.854 42.191 cv
141.854 43.8736 140.493 45.2339 138.82 45.2339 cv
0.0431 0.2902 0.0941 0.0039 cmyk
f
128.319 49.2491 mo
126.599 49.2491 125.208 47.8575 125.208 46.1368 cv
125.208 44.4161 126.599 43.0372 128.319 43.0372 cv
130.028 43.0372 131.419 44.4161 131.419 46.1368 cv
131.419 47.8575 130.028 49.2491 128.319 49.2491 cv
0.0431 0.2902 0.0941 0.0039 cmyk
f
169.076 48.1758 mo
167.491 48.1758 166.207 46.8912 166.207 45.3062 cv
166.207 43.7217 167.491 42.4385 169.076 42.4385 cv
170.659 42.4385 171.944 43.7217 171.944 45.3062 cv
171.944 46.8912 170.659 48.1758 169.076 48.1758 cv
0.0431 0.0667 0.0235001 0 cmyk
f
158.206 49.5845 mo
156.603 49.5845 155.303 48.2847 155.303 46.6802 cv
155.303 45.0762 156.603 43.7793 158.206 43.7793 cv
159.808 43.7793 161.107 45.0762 161.107 46.6802 cv
161.107 48.2847 159.808 49.5845 158.206 49.5845 cv
0.0431 0.0667 0.0235001 0 cmyk
f
147.719 51.9356 mo
146.096 51.9356 144.78 50.6202 144.78 48.9971 cv
144.78 47.3731 146.096 46.0626 147.719 46.0626 cv
149.338 46.0626 150.653 47.3731 150.653 48.9971 cv
150.653 50.6202 149.338 51.9356 147.719 51.9356 cv
0.0431 0.0667 0.0235001 0 cmyk
f
137.721 55.272 mo
136.077 55.272 134.747 53.9415 134.747 52.2984 cv
134.747 50.6553 136.077 49.3316 137.721 49.3316 cv
139.357 49.3316 140.688 50.6553 140.688 52.2984 cv
140.688 53.9415 139.357 55.272 137.721 55.272 cv
0.0431 0.0667 0.0235001 0 cmyk
f
128.304 59.4937 mo
126.641 59.4937 125.295 58.1485 125.295 56.4859 cv
125.295 54.8233 126.641 53.4859 128.304 53.4859 cv
129.958 53.4859 131.304 54.8233 131.304 56.4859 cv
131.304 58.1485 129.958 59.4937 128.304 59.4937 cv
0.0431 0.0667 0.0235001 0 cmyk
f
118.364 54.2276 mo
116.604 54.2276 115.183 52.8062 115.183 51.0464 cv
115.183 49.2867 116.604 47.8809 118.364 47.8809 cv
120.108 47.8809 121.53 49.2867 121.53 51.0464 cv
121.53 52.8062 120.108 54.2276 118.364 54.2276 cv
0.0431 0.2902 0.0941 0.0039 cmyk
f
106.449 50.3511 mo
104.592 50.3511 103.094 48.8526 103.094 46.9961 cv
103.094 45.1397 104.592 43.6651 106.449 43.6651 cv
108.282 43.6651 109.779 45.1397 109.779 46.9961 cv
109.779 48.8526 108.282 50.3511 106.449 50.3511 cv
0.051 0.5333 0.298 0.00779999 cmyk
f
92.0943 48.5147 mo
90.1412 48.5147 88.566 46.9405 88.566 44.9869 cv
88.566 43.0333 90.1412 41.4898 92.0943 41.4898 cv
94.0162 41.4898 95.5914 43.0333 95.5914 44.9869 cv
95.5914 46.9405 94.0162 48.5147 92.0943 48.5147 cv
0.113701 0.7608 0.5725 0.0196 cmyk
f
74.4595 50.2574 mo
72.4087 50.2574 70.7584 48.6065 70.7584 46.5562 cv
70.7584 44.5059 72.4087 42.8936 74.4595 42.8936 cv
76.4712 42.8936 78.1216 44.5059 78.1216 46.5562 cv
78.1216 48.6065 76.4712 50.2574 74.4595 50.2574 cv
0.1529 0.8902 0.7255 0.0353001 cmyk
f
50.7701 59.6597 mo
48.6226 59.6597 46.8951 57.9322 46.8951 55.7852 cv
46.8951 53.6373 48.6226 51.9571 50.7701 51.9571 cv
52.8707 51.9571 54.5982 53.6373 54.5982 55.7852 cv
54.5982 57.9322 52.8707 59.6597 50.7701 59.6597 cv
0.1686 0.9294 0.749 0.0431 cmyk
f
128.317 19.8228 mo
126.654 19.8228 125.309 18.4776 125.309 16.815 cv
125.309 15.1524 126.654 13.815 128.317 13.815 cv
129.972 13.815 131.317 15.1524 131.317 16.815 cv
131.317 18.4776 129.972 19.8228 128.317 19.8228 cv
0.1529 0.8902 0.7255 0.0353001 cmyk
f
114.693 24.8326 mo
112.934 24.8326 111.512 23.4107 111.512 21.6514 cv
111.512 19.8917 112.934 18.4854 114.693 18.4854 cv
116.438 18.4854 117.859 19.8917 117.859 21.6514 cv
117.859 23.4107 116.438 24.8326 114.693 24.8326 cv
0.1529 0.8902 0.7255 0.0353001 cmyk
f
101.177 31.3306 mo
99.3199 31.3306 97.8208 29.8321 97.8208 27.9756 cv
97.8208 26.1192 99.3199 24.6446 101.177 24.6446 cv
103.009 24.6446 104.508 26.1192 104.508 27.9756 cv
104.508 29.8321 103.009 31.3306 101.177 31.3306 cv
0.1529 0.8902 0.7255 0.0353001 cmyk
f
87.7369 39.6353 mo
85.7828 39.6353 84.2076 38.0606 84.2076 36.107 cv
84.2076 34.1539 85.7828 32.6104 87.7369 32.6104 cv
89.6587 32.6104 91.233 34.1539 91.233 36.107 cv
91.233 38.0606 89.6587 39.6353 87.7369 39.6353 cv
0.1529 0.8902 0.7255 0.0353001 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Pierre Laurent) (INRIA)
%%Title: (Scilab - Logo d\616f cmjn.eps)
%%CreationDate: 13/09/05 12:05
%AI9_DataStream
%Gb"-6rK8J9OY>i5W-:35%]u^G:9/mH:fU]&,Pq&Q>1sQWPH4@;F>k&]ShjnaouGkeOMlR'p"t4&j-LiQU/%8IStT3.lg:Yoqc">m
%8-"K7AcbO$lt>(bVqX.3\)2&krqss!T>o,+kPZ`$DY)#kmUnc]5H_`S4Y.6e%;qc!dN,1;Kq,e?$KDtck:$&qPV\of>s@*2DBHX+
%^Ur8a4Ik24hq^NpEc^fh`U2eH(Z4=-(RtGOGC=o6Vp4r3ipmW9c]3Ji^H''?hOWQ[hcr9]dSUP-n-rt-h*]JOZf<usIs$*`rUa^r
%A^7r8o;eAYq#MSWDs6rI]>qrcEA#XM@SVCDJ,dF.e&15%%3`g.9u#qR@a'<c421RZC%poTir84dp[apMJ&U"aI**P?f=NC7p.&'\
%Y;bsqjjie1k*YaiY'bSCGC0-m]h=eSk;s%H^S.Iumf)LfI[q[Fp"=79mdKU^oa;*hnj$!hrq9Y^!1dZqmJY#kG<=(-!%%DAG>I,L
%)G0LLg>+u.i\>Hcjhp6:rPd=c<P]Fpf8RFNh-KIt/)&Hqln>>/4J2TOX5,keq`]5@^EDq6Y7c'<f=Q5CpD8llGIP,(36,\-j5tIX
%p>Y?5Oo'<#;rsX45Mm"m^O6@&"(b)m'M&0`o/AlI;/)Y(R>W(/q!uU,AG4OAS()@s]mP;(h6#kqI"pXsC]CoVH$=],\DmSih@CKh
%rfAt)Fm8e9Gr6&K-Dp\u$4kb9Yl!J2mSCUA6f@P#p@7S0HZ#<+Y:b)#*8`u0IJ'e3e)MF/r#!mp$LVSr0W+@<X/G:>rU4X-*gs?q
%Il0$6hqYou?"_juQLjDME.;dU8H7iUs*/P`h<m!.mCV[32!lqT;_OcWGe/0Kn\ae/(@^(&]A%hJq^8,m:[Vmic>R%67t-oTAiL]U
%2fE:mDURn!$g<Oh'>0Q$]u6k##\XqPR/?$hbU:0=^\[B`p6XQR`%o4h?XCD"h1)iEI/N*,N-"Pu'1YTk8\X@bJijNKJBl=!:-AOU
%rr21W*WAtQ8Agt0]):Kk5E?keSNI@4d>\IJ.1I,NDA[(Q:(t*%DTp/Ah(9"uZeIDdG;na1/9$'Hh.8A4=Lc*BNk^k:oHb1AoT!]_
%n)&M4QW*(Mcd[)E]^+@Wg"r1dIt)t<jsm/*AKDdn]]@HmIl#J4l'q,8h>c&sT:_aHT:V[FDpOKjkO[qc4AY/14IcrFrnO(=BBNo?
%B;]AiBA9cQZh\Du)pcr84:>f>R6Pb*rTX.Bg$.bcam&NkpiJ]j]$p1+S]9,t3h6%FGM8[ZT:DIBSt)<e:QA65PNcU?8LO$RS.$eE
%`1?PToBk6)FF1=LDND9uG1qu2[#NhE*O^F_[XE@IIXH<dH@0bG4[)'$O/M%.3$$'"E',-;@s?_SkO[AS3hOXNq08LoBccFoa#VA]
%lt89Oe+n)DSPCQ]Fump]5BYF7V;*/$)Q(`1;a6k7BB/6$12b.mE?;#t*7GbF0Fjl(S_9q4FI#\N8_U'%1oDd^.A`Cu)NmlKoj'\@
%BCRgM`,.W^@r7*KXMl#D*28KHp>J-(L!suR[c'3i@1$L8+bgP_i.DF9E'Bd$Vo-W\*KGo#R(?]GdL_0f%"fYWd/.m6k"kr4htghI
%qoOm_q<3GQ]_B_GmbFAD;g760mb#d%Ehc8[]&8<*Y<(9ZII>0?pI2jaF+a.rc@+t6@=?/O]0'?upTEEOm$mBjk(pat&>-^jS0I'Z
%;pKBQF.QnNBDoC,1J49:LKm6i78:>6j';4J-K31>q`^5)1MJ"rR)_U]l('WdgJ%W]Y/g@bk;rED[ufpCEa>SJl/Q%EPM?FV_g1He
%U\NV(+ZE<ANA]fe43ih0OrNpBS9M6aXm0unL>9p#\+Z%jrA_:c8a_;=Gb4ce/O"ASaPE)$G>5X&NcXrcjDI(Qk@:-re`Z?0\XV&-
%G.Gr^h"TRI"/hP'cDNktL!TZ/17tAd0+aSmR=S*g,FqQlF.X>nB*Ja3d8FSd.5Th#B#'VSLhH=)GMHiVoU/'6k1#VUG06>%S2p?i
%F7S#Sq6nVNm5'ZUbj$X`r01@a3"LS(4;?)Lk9k[!)En[oOG?Fh)7r"Kjue+$GoWC;nT966kHX.?(^kVjV**n;4SXs.+?[buna,oG
%XNuOJk<U$W?qkpn:3l=Mk<XKY#P6X%H$>iA16:q[g3L'g-HRK^c4V69SYa0Uq0D(XhffXG1!AIG+CB=Wqo1n0&"VaiZ$`^)r)M/t
%o?t,8.EebClVq%.&7G7!YBICY=A*Dc0F,>uZPR'$#W()oA=5*-JK9EtNtu6-'^L4\(i,sMpZ'4p/&f(A0?.0Ef)9hJek348a,@3'
%MKS5oCr$G(q<+@LFRT1p5Q9nJ_8E08?1St`r6s&cp_S63Rs4YbO*jFoFRADnPPO3L\p0Vq<;0AnnY5urBYS-4E0W*Q(MWC`/Za!W
%WbnOAZ)*/]J<QO7@$@j]=tj/[8%g#-$;]6_gA`L#Qr?gpCbZ;5Ml_GVA!gCQV0!I%eBL6C`fAe[?eet*ranOsj:1#`0^)QRm"ct:
%%YM#(Np^J#^5U@fdJ:Wd0<DBWl^[gWqA0V07Di%5mtDK_=J75A0:Kl'FRl//]Wf82B(7XI]P&'6XRMre]M'\+R`,Xb]P&'6e&bBu
%3dG.f(KPe./7,3;(X:rn'j`_TQg*R"ZZoo4Im;3;pWq[rdR&uj5!Cd)o1*41f2LjN;>7-`(>/Lt2m)`@c/?Leglu3]`BAg#bgcN4
%Jl\$Fj'hfU[s`8s4@K3aL+j^H5OLIDljqR[P!$FUrR4qkVY@ItC527Am6C"tkkLbC?V*GpVu<O$k+(;Wri6oK[/U/UlW4q7?QUVX
%p=VO(:;4KX]@m.qdi\7Q$`<;B*Y[cTOn9(]2ot%DEUq2RmAtr1P9.Te.6T'LCqD6P\"oT8PD[6',gT"WOseDiV<L3?O-?L1Gdhs!
%CsGV_iTF13'7.+X*6U.e1W_H$PN7R+Sl?ou7"OtSIe98-8+t)<D2Fl@H;<Q^Tk>n%EL5jk@oB4:;Q9F/j[o)4H*f<:G#FdhJ$RP<
%5DKkp:5[[A.:`:GaKq`+=IrZeM&tK=c9'^%A%_07&$g2ie4pC!;=Ip,r79FL/8q00`H/>0[X6?*54&o\ca<G*M^L(t)+\$N;0>R?
%A#heBmofY5p$V0T)]=/!3EnVDMs"XHF>?\YF1cb[]k:M2HUgs,:TH#W_(<pbllY9@4!1glC/k1@Mm=7G4V%J?\Yhg-s/E*W*TI$Y
%B73FW*7.l\T5)\)RA3.3j:=2`G)CIpQ?uRm=?E,-6.hti,6(Sj@m3lk<5)'IEO9btNW:+<3coThkn)=;`rf4OVp_9AUZ1p<:2N,@
%7<rtrjB5@C8=hPYrm^c9Und0S-X3-hBdt_DV;mM-dsjKXlO9sQrn*>7T^%'-#HTImj^CmC<$'RG8F%[OXc;R,WgtUjqN'/E;Jf_k
%dMIg`iLK+i7&\P,b(3Rpd)[jB^CL&pfK1n;Fd1)EQGHj^FWJnQ0UI@76PtHc%c9<dgEBc+.h0r_7bc<>UU$(l=be73`A/(\&QhP1
%46gLdnR1\*8CLEodPDJ:cc"MpD/f4UEB&2*F#b:VBPnth%%g\:U[]7Zo>1;KnNTLY9VVUJ!$gHU7K^X4SoYeb]k@VA7`W=,9F!\:
%s,Aj;0O/3.1)Mk&3`EO,Yi8(PISkVa!@AFTLs.H5aq&Rf7*d:-@0>5Nc^ie9n$/In/#Mp,iCmaY>M.37Z'u8nb\ID=:&`tK]c:+4
%jnG1c`_u"9QLaR'RG@*&<h4/oGP]oCeFPQhGg/33BGu(&/U>Slm]@.$_NE&k&YC<Nf\$?Q)4m9AkJ^:V)h62ff1!EH?i%0Xk%fsB
%''9?T@CBP!nuL5\JOB)p2.lt0pr@WJIXUa.]A*8.L1A!K6[A!:KKcGcW%og&Nn.rZ90I,t;_u!g[h<Z?\_>c;^=KtNkf0X:p&U/T
%H[j\-pM"I/Y2OkCc#[Wk'D$%bF)7FNT8oe]qMaQ.k)&4,jVc8eJu>A.`J<#He!B(kn'jHIjk8qJdDW*3CnAa2@sLt#QAZ@:J8--&
%G)/%a)4OL@%IUi>f04Z+M#$W0l2KN;b)fbRW+4u/VKoF\MG8/jM[p"63o%p.ceV2`+7AD]o$I#P\*35^*WDX,7#O7t8uEd!p-Tk8
%&sDI'm&94\FoL@f589JugDsgU6VMHd%4FJ=\&&FJX?`'PgBMC5Y^O;&!o!us-*WrUQ3,eJCb;m)^_VRgaCntfJIMiB*O>3s)kO/:
%[NF.R?lO^"#dtu1P$hK<>8&$FGC^H3:\nEoo*W\K2D!Lf@,jSu$T9][`"5]h>8c,>kf?#ZM;^oZ+<r>q")4ouS>,1WJ"DNeIk7J;
%,hdSZSXm1]^(W$X9Jl@Cki7l:,a51`K.,Ng(aWgh?>i93T#<T[SLDj;.*]H(b,8^HCdfkG6lV.qY7.0$p7guHMV5<&7(8^TUQ&`t
%%&1K0HdgeJO$LNq//)$fPM#lTAWR3Slg;MQHG]Q,_bkbF(QIqU%7`7(n(1fRGa\D7VS8n>;nGquf4$oc(Rps@@&-Ec1WhMq1Wr/c
%3r8kWSeHBEj\b,<FD%qkUMF1N>,sM&3qa\4UHGM<UHF`&ZTMF&r];RT.@uRRT-)JDbG(1Q'_q7_b.P5?:;i'VH]4R/4ZCg-V9^]R
%em=9dJ#Dj:'jXKA29!257]8rblHKk$M=Mp;7X6>+ApL?.48Q:K7g[OlR9eGfHB,&oTX/On=4`;8mc3,G`F7BplalgMm%3UM.iu;b
%kB7s3ZodK[;m0K9kI184a'H$#f0.<"pMB"5p-tR/ZfbIgfVDf`A[u[P<1K]AE'&,6+4,!gEfiA&.%QQeM0<6'F%"415+l5DITYeo
%SPaKpWXa4]G7D/`[g.$rm\S]7*SKIc1s-<-4&K7Im%!F#8$^Zh\-p>P>`PNQ):qiZXnWJUE?7TuZ(Bd)iZ8fSi4dp/`;)>+Qf"Co
%,@8&T\t(oHF:6Vh6pYrgGiOXbrWhb3W4iK%?4`GiBD`(Kq@H&\$m\V2aV6l(P<:5WE^g](PbcM08X_5&)j4kchH8F8k[Qp"@PNre
%)Ft]j&kI8W+^!GR_2LDSlUX]d8Q6^o\=,jV'7YnHBA(Te!RD-99CT%!_i!WAZ]6B";j)&H,ic<YkDi-bbp;a)P'J:o]gT.ZMYmi;
%rHXQYNYX:Hs*3\e2WglEJf40b(b`340G@114DdSCAV-:*6ROZRc2TH?]`0GR6LOQ4bq20B=V%&"=$lZuL_]gocX.;.mi?^TGiXq\
%f-%0<\%26Y8R<4oSQR*AbppB/^t7-21E#hum$j[ppJ+2-199f_B)Otqg!'l90!7\V$G*;k9BofpSo3--#IB4m(XVR/H!*+n7<;Wf
%\'*lVWOsjIT:,rSG&^d=`Trt;Q7a0a(`"jkL1<O0a\NR@Rn;V$Rn1k&Vq_SQ?>"6RcpA\I&%Uk*"K@<>"jp"1I7k7&.17C68_%6.
%ck:+>4`(o'PQb%,15^ka6E:'.6Ekr-&GGOU-2W8dT^FHXgI8Jr9V$YVl)qmOhqRrO6a:i)^44l)Mo2#;\kh(/EHq(DpM%5m%WB)F
%5&L&5iQW1pVsV2X]_S<![+uOR2d^Z=pVjo5gd1sh6IY$D+oH'?0HYc/D$"i0Vu7?#dqDM#7(Y*\nO6Jkl#NjcQ'4T/JBc5,j>on.
%_>R7"jN(<FGj%6NV7Z3m5qg"5r>7EXqWEoZOah@pFhcTmDCCb>cb%/C`p$iJWHm1#[W^c`ZS,EahQQQkCH/mVK<#l4YpT),.X5HA
%LjQnkA_$>A5/0a7d.Qr1kK>%+94sbJ+6e5Wn\4)SdQQ=cZg*,k*gkr>ks!c,;qs(/(T.'82p=QX9]LoEYU2$Z\L]S0a^R&Q\QOVn
%QnNTKn%/%pDS!ni?7=0+Z[Y4LQQV`=,+%Z1flAE3[2:LHB'I6ER1>Z::3>mS@%#MPU#+2Q#3&]5l??Bs9!T#)b>2>FD)r>9]U(LP
%5rA-\$V-VV:0*7\U7@kHEf_gRGu<"B/G4srWlsN-=iWN9NLb1bcD^,QUV\9l0\`noEeXTa8j'0E"-(Am@s"MD40q92M,$iM4mDY+
%\7*u`;=7d<Z'S&KYGLsm8EKk9>j_Qa)=S;@qqm%1hD/\kHS5m-rtGrkh9'_.EtI.nG"<UrMXE$r]"E0Ff62F^QWA>mR[FC`kk276
%lf:mXH!0c&PKdsBZ2nDbS(r)tGb4]fa@a9>*_frSk&pGAV_l%;%Qdu>Q:9eS=XZIt/Ij.>_3j"?a0KSFO+Md"AHb*9.WUc;-A1ZQ
%o<N;[nZ&n]T;/gU:6q5BAUDHuQC7Q:AR!t9/'ao[OJ7G>5/ncO2>*34lZa:NG28_4cFYmc]ts!8DJ_D"`T^M@W$aUIQ"6R,s)?I\
%=(jhjUlTf4B#"1`T'?2L[g/?dl8`07h*.c_[NG0QXeon-pODBerUA:(Qa;a#<r[;h;1M\Q/(RrgR"1\[F27U9Ta=+cEisgqG7sT;
%nI^2>/M-ej5N`EP52X]s`bZ'e_lGZm&mOljUZP44Dm>5g4o=GV@U3lJX./?a4'cKBe(+D=F[o`n;n(CZf5.IfgZhPFdo3lfNh.^:
%C(-%>)PilXe74KtVI@@rG2g-5kAfc)*M%cI=e9rVVegE2LOk8M:3OVJ^FFm$$);h38.Hl4j%8pj;OM;]1R7=Q%r4MFOi.V.Rq_,g
%=DYIBjm%?4Rap@/gjRnFe_q+qIG1.?i=Xjng7$RN&_qfgRap@/gjRnFQ*FW^@C&*D?S_Mc_Y+B2moIKFrci+r7Ir)0F`sR^N0sR+
%ZQ)9F*D9[ZjtH'acV`mENN>47Q9@UEHCf_qYO]=rO'-?KgUBHBD9rf`8bGFunJmjA&GBtgI;<r^*fV!C99XJt/CqO8\o3oNbHrds
%l+V/KIn"S*5$_9h?1F7b,B_=+h*7%0DlL%Eg+A96kFBXD(@0,ZQuF2/hYnmZd+9@6/*c<S#?FsgFQf=U\c:c$eBY8c*`T-""dc<2
%m_eDNb>6`R,26bA^Pj7gL[FuAM>rq^l;oXQ5Q#nn'C96,I"r]37\?bT;"cp+Hfi"SC7hX[=kP1i4`TosHOh]JFla1W?k0'@lX';<
%Ml"DpI;uss1'$'[0Po'_[eo%;hY/Qg\ZJ!M_'j6fcSG4KhUAS1Kfeeja,+#W*;BG@o%_&jq#A\pq9X*UTR2'WnIMd=f%oH!UoDP*
%G"9(q@d4#ll\b:2*KMSeh)H30UE1K`i`1*>S%*Z1[UZe?GRK-Pc1^qRJMXUnLhqE[jKr\taA,0lNoIRTk@7;G;QX^,njnf](=Am$
%oq4i='g!6Y];jOadB9LX.,1;GS2iH^6L'[EEu^u9!.-6t@B/>CSG0;BGL=1[?s^DY@`*KE?sY^PQg/F1j/@e_d`LQO[gR,V)HWe%
%?Xe*@0&_,V^<VLZ7]`l(b2N3&0mFRPUeZqnHF,b-ZX26(;!aJ]j`7@`\C\*7s$?NpS?oCLi2"nG.pGc8M[po;r6QHD@_Yn)N^>"p
%i>C2=\b3/c+7-[@hGS\[HMO[\""P>=7]Y50J,1#4mWZ.L(H8rbS*pKeEETbT!PW@Qqp4V#r(1]-j.0LsG2Kr7es+uEa0Kf2,(!d0
%=,bd[]fEu9:N+i`g\&5QgmPi2gTk0UcXtd-g%@21SAQsLYj9\PZ5pPtk.7.m5*c('BBFHH1](pAZF;0LrAA%tG3/5cenh`k7rNP>
%<jushk#NRAp"[huES4A_D=u1TYAEmN%VAp?/6d2F"#Y;Ad8[eNeRqi%6e2-6I6?&D;n\t@3bgR%R-JK"Q\op_W"H%AW#DDb3\d+<
%\N3a?,V>%AcCEb=E1)#k7mggU$+ZG%9,EL)WcCq6:<Cd$dEr%WH9B4P^/9*tEaG?LAl%1WhW,ZGh/(h/f8FFQZ&NmMJ9kTuRiQ=_
%hIJd=X_VRh&YlLrfU6#\FjJcERC\sBY%E);3e<olNG:<"3gn$2-J,g+6oV'XD#/IGYZ?eLoB(O#cIP>-m!n#Sr&%qfj'5g(h`%NG
%^c,WUh0sX!Fo-E+qq\;SB!/H^\hDq!bJ7K!]QehZh;@?dnG)S6lM>i$OJfnbF5o"Zo?iZ?m3YLsrA8A#4IV!A1NcLY/YqR%J"YD#
%kF_c+"95_7S)8%2s"F?5%Di)?.oa8m]9-/\[s=P%gCc&.1;.RFi:WD?s-DC4]76FshGOqmdJs6<H=bb,$-C2^IZA8brb0Gp;*jb#
%(RBi1^&e+&:>:6Q:Er)"KHN2n6/^mYI27\Z0"e"C[nENnFH_<@8Bnjk)V?/&ItKtCRIb9$r,e2!^D,YEd1h=%W4m"`QClu1QM3a>
%?X'E3@D4tK66Rc5"b3YBT9&R@=AgQhMI99bX]aDlW)smsniTk)3af/14=fOiWYJ`c*`E!lQW@6<FH<SH":JPX0)05$69%STW[X<E
%c/2PeX/4(]k_=ih'W*^!P#F!<+k^'@e.bUj%+GFV>M5*PFioG,g_^qIO^B[b.]cGt(m[$]er2W)2)S="o&L^UfnsKqL1qZ.9Rgis
%Lq@]:8]A'%(6)oVVQ`Ck?s$H;3Q>mSFH@qFfj4tl$j/T>8s1O#>:k:qU(0)`K&X/feD[:/6GDA[<bF/FCb9eJ.87d4P.hbHG1^LA
%*I!BMXn4a`A`RP7'W8(0NkLTFW#$/+at10QN]ui&Kp=Q]_6n)hgQs3\dicQn(g2kDm7SI4MURSSm7W-Jq?=pF5)[.^e^V<4=D:a6
%_Qo;@B5/@P9Z=8;r#U^CR9Bd5Bre5(=jdTOJmqTHV8,s)^^;'8l"'1BL/d>[/]UWLP!Z'ha`$h`PrPa-EfPed8XqUW`G$`AUqU#h
%UG/NH0e@+EA5c\gAQ+;JM-C6mZ;39eCDmqg>.^'jQS^1]C)n"dXf&J(_N]MgZ)l9'9l2bQ9bg^+EN-g<I@@-AdO:S7Nj[m@8/*u4
%.O\%r9kDe:L<3L2MqVhjJ(L6rhOYI1dFq[pq!H&fS))!Enc%PAiSDJ$[LYp,?Nk?pG`spDIIB'-\X(9(DkEi_>AQ7p/dP%6DMg-0
%?iZ,ZgS0,6Gj7dCkTA1BGmOA*1AD=X]4#M#]ccLio$MeO&J?M--5nYOp:\;:!1PCJUJOn9S,JjtO#7(i^a=*Lih3c8fQi$8!B*ee
%+@@Tk2.TI?$7in=)M^b8'qgDTc#<>Xs8@dW9R`,2_gg\hs8+'Z;ClS'&N3Hed+1-'0@'KuVBK4KE&:#ZhrYH!!US>dFKJQ!gpH,=
%VBDYcCM?i_rHW_RkF+`o?^i<dpa;P!hJJE,-pg/K,kBe;EC[`7_XBD)&9>OH22T!#,X)T&Rmc+M&iUmum$/jehB_WZ4I_#]Rn@>Y
%9F?7!"Pes5D<Vk*cMQ&$BI94)h^+Co67^\Vr4Y^T9%l]2^.<o<fL5YO8Aq,V-#rR3o%[M<B#g3XPDTC(W[6Js@_a0&dqVc8@$->'
%25qFs80u3c,<([<HE`61&8r19J.o>tRm[Zu'+(Km&Hg`T6>0*3J2S"gM<s(W4#h:`2S2Q"!(k_(DGi2sObu^fW>Mj1`O)(5$s9;<
%@QjBQV*7eB>N/@$@3S=ndV][(%lK2sd[E^/W(A7fejRA@9qol0j#d\<V?0_9&kSM1RPY)MBncYt,b$UlY\A-I`?pQEC`<:TPOL6$
%\8Ea]%^75Al@j4L[7R9X2OtIadj_(eVo7/.$>Irq`AO%`37X`=49eJ*K[CR#W6#1H81'SNA-,jY@nLJcI[<G1b!`BLdUW>282KKE
%d\`5Z2!G_&VA#+e3eas*QtV[W!3R2T6F4aV;[\OE.k6ouP>8[%9d_ceFNX,j3hb6&;m(&f1!q>90RdiVS^<n)f,1F=<Who(guB';
%:dJqbU"Uhm:n(;&[L!\u-=ju13e;7UlaG`oHidESk]?FLPMQ3!FgdAaY5bPHl/M7$lCPB:Fa,fAL6PELCrFW'"C/Bia/iQiT;(RR
%>W:c8n52%OIe1kL?SCt'1gaM9"`n%Z%70Sc:%^/FW`^^cX?bp-fP2S!3M-.4IUqal6RF^Xk;glL=U1?BfN`JnrgI['%[l)LTE__q
%"!AgN'>osYQ-!qF=Ymt5+#k=$l35&#`!.4:AD,U.<0/&2j;g#@GVo9VHgbU!$q*SR,$lI62FJe[K?uC!)kT^p8R2d8D?uko/6MA/
%ShT,?b06@4Egu/,\9'?KmL9Th8K2kf">7"Wh,._U+o%4F``bn[(X:s#An9.s_1=?!^o)s[WH]-^'V*96Z\7,."&O>^;+%]k-.d4`
%(!NNHSpLVucOGsZ,HFc,'i4plpjcZOOX'Tm#,#$oM+I'mfo]Lc,AV10oL^1^5%s5DHYr&ia@P*]\Y7FGeDISh&tCB6PW?X\!s\:P
%p6=2@X]9pRCB@Q*MjnLP"!D[SB^V7u2!:DR2$:*Wm9'"2$\5%0RaB:cDZP-)lVHC.9SNt4GQrncLWW%3Ab.HcV0_=MOh,)Q4c7NY
%$U$<?5Y?9ZaD.\,^#HQ*VV3Q61)P<@%KU/qoEni8`(o#:i&-7^=7Cu*%)%7'b[K3U^qq(G?HL9A_pBpI0NdQSV[Q&.ifq9X<uRf+
%<Dr7<gk(q37)knoJ<_;Rc-PaL)5m&f8>9@0C4Z#]'-qMBGm-.A;<m["'gUn.Rs!FP4Z,ZLetKoB'[5VamPF`=B/s8ac!kRdNh>70
%c^dI/!]<"LEq\d6a(AW%79X@t=UM]j-8I85EXkTJ,0!ZTacMobX?#i<+S'+KA*nUaBJ_%Rar-A?4"qKeUN.aT"5X*b2FNn3jK<P\
%:F9*0ndln!3sR<EM$P'ZYsn1;ZRgie:m_!#)N]BkMFDuPGs$\2O>WBcLnC3gAF+#5CWKX6ic1]X&N>gNg*^nDa!dp@_ZC:1r8r;@
%EQHlG?)j'$E'gR^1j1)Q?3jk^`[;\W_%Y/W2[k'>1i;KF"9YG<q(*XEZClakG;B]R\VSJ"S&Xki+uR..b\&^bX,FV0`fX1I((7pG
%HS(B$aJ^9(>H3Sio/*/8X[InT!BUMejHh=C+#'e1GtcMMS5oXJGKoA#Vr4Bf8t0TH$]#DT`FeJ'Gl+@?aVcYdTQhQ'?AB:Z<imQi
%k3+S9%HP%cj06W4)HLQ+8#6&octPSP3PUU&@9K8b.2BD/2S<ABit310N8puM-LuYtS2%bfNf)apPUXp$QV:88=<e;S^mmU6o*3[h
%\7oV.]o^L?OiS).,m/N].VKKWfU5+[c6"2Pa"kXjCI3?-1rR5.$,1(d&srbJXBM+h-ID/i-pJo\1];c!JY't"h+,E^9Wl&[PPZ6B
%!mRX:eBI/3YS^3!)fgiH$6^kXC$^]BL#7bm'F=HBjp`fC$$W<l2m`0Z5*&FhE=_`p'[9cdK@qhF0"#>j!]OQll"H$?'5C@8arC^V
%9L#M:eQaXVL5ZWG\Njp5ObD$DVbP]!i6?5n^lW.T?j<OR!sqc1DcL4X)X=k_H9aue1)bpQL<dY*\MnkumFi)<MQf4hOSh$1e?Upt
%b*t;T6DBK%b*tAoi(g,V+KM^IJg"8RRCrAsEE>]W4tOi<1q;;^%kC\+ON0K3<-sDiMpS>HaQ5N=leQiZ@#X9rS_n`*lPSiBXJ@\7
%A.JE&I[_Z&gHD_k-<5=ik'UQ[A:dUuR:i%@KL,h(9M?0(R-c)`:^:/0JR^3oj%(^8RZ0WhZ%l7/7d/Pdkt(II(Zqk0OB&*N64M"S
%3^$nf?r\(*>U4aMdgcE."%jPte62&;"ZNblm&;&AS9%0$JW_Sdh'9Zp1GhpKk,M\4r8o6+/u'JRAg=+e`OTl]kds2Xo3Gni4bO#U
%s+,:?R0Enb=EW&K`_M8E:5WJFhaf+8am'hH=9GU:#\h_D"p*GF2/*J]h#9aJ<F5uLUVPg1Dkor`<*R<k<Rub&'p>j<`o-3J[4pb?
%fs2@tINJ's>0s<H'4ri:3`'7er'"\o93@,(e<RG7<V<\0/RY0@Z;rRq2&+Us,aV]q7ZIL4=P[Q$q$GTmUFPcI"E9ZN1rdC33%I@.
%g3YUHjQj+CO\qef&-S,_-#(dN$`@6"eAB[?g<gL>6%?^aE.tKgZ@LApp^6&Q8>J9`K!c6@E+G]"+"W>@>W)]"aqJ!$:0q=kEC\/5
%X8nt(fe@XqGD?$mPZ\"\Z[Nm1[UF`.YQ]&*+iVfBBkJ2YJW#P\bJXX%ps-3AI8ci<&>$Ql0@+Hl]2!aP+rF(hpJ'Ln%sQoq/U:WS
%]:JdPS4Ab'd2+YC7UYXBZ/hPm3+t0[7lor7?B)a_<JmkB78i2T"D/[>m)P6I5jZhd72pdiLtSON'aJK4_aXjY1$H*lD*q)+OA"Zk
%aD[3M.?RKb&7&h3,8gN/;6/\IUDc6rKe_^K</&!?GgWNN-7<Fr<D]Gq'j/DeA-0FO>*0MT#(\p!F&dOpKkICm\ZbRBXU83`,bn0N
%.)=Jme?^IV&7'T.2\^B1bUTqI=1L'-]Q3'dLtPTBi"olrOCsD19PVg5<&E?."!sF`g/XIZ]0I@(dF2?:hiXojS"ES$ol&-.,8WtD
%\"_4[fJ,^La)%uBj,=m5:#m-I1`LoNGu8$j1;GgKf2!qk!nU4Y-UXU_*358HZ0NdCP9I6t-ZFR@$RANm`Q=4_o`NNB:Wb@r5FBZY
%GX13?)TsI7\:2Lp7oL57IR<#;8p$3.T%nF\:9&ncL8lMn-]]gqR$bWj:o2$91K+sD]k6gTk2O_l1E27G107837oDD#4@RQSLgML'
%3`NLBE]q3C,RXfWP^)0!;J^HV5es1=;a4/+8.cc=V=RpP[L5n<;A&QjfQjJ$"?d1:Om4ZX'#bnXVhPuN&#-^FVPe0:C'n?Mm_$+i
%3Dr"Pf'VT`Y_/865,HnR7V_$#]G":_M1mU'bE7_)a=[*MM:e82W/K/WXk-/s-jish3VKMZe8jVm2,[(0)BuS^-<-tpP&-p0.8A>$
%A1(V+e'#!nQH108aC7f]>OC(7Mr`')m!oISkrJIPKq^.ZG/'`Y#nKV=gu0Ln+U>'oOW,p7(Yc:b/[@r_.4p^?LIs,sp48!C,WZ,N
%h2)QcJHg<L#3Wd340l[O6^qgRLi]ne2"8<+bo+X\Nff!SPN6]#gg-/cJVWn`[dbK8RV_#=dP;TjS)I=B#8b[:hdNo?g2eZpLu+<K
%&+YbC+:b5qE(;?PF\Q<&%\nFC9eO2rl'i;3hdg\$XV0_l3?H2-qQlR0CZ)0D=*H./KbSjV"(``H%iK%>$t40C7=L^NT1a]X;UToM
%8`*@!A-`?;0EX1Y?;bd=n;=M1niT#[;Agk=At9p2.ZUqH48#W75+H?(Jk$>TA>Hc"("\i:X[oA6fcs(0Cn_.!RJ3G^/dFV/=2P?6
%0*e)t*?-<ba:fXEJVIj=q%93lC9=RL%BQtcs&Ck5U]=JuQ/5LmPFXP3@7L'pm5e#=ENn,N"jXq"aOu4\6YBhLap3-]EXQCi]gm5%
%"g8cUi<=D\NMG6AVB-/fq"i-8^%_)313qqLn]<;JV4!'qDm9.6X+8/Y#fNnD:.nKZYg`'@bk!>8qOBu*!+O/e*AG[bHSS`%M_1?K
%3/\UXPr;"4CX%Gn_\K3P:>2G0QP\3,"X%PCk7`iIYuZJW54N(m$o["I`&cO+-(hMG>>lZ+_BRtB1BgDb:F6V^FSRA_,[OS0E+7N*
%#TSPDZLoYeUo'+e8$'3\EDRX7#bbtX8.\I87=YMAbuoM2[VE`N#)=Bc1>Aep_!KI)%SS$7Eobn,'Z#oSOC[GW9s#m'nn_@'L8EA'
%Kb52iOnG8'*qn<1An9)SoNE,#Z&C8C@'=SpeI8FnP\Le-7C?N<`<//s#`!sX8fj:+!#_n/ac,8TUa',BA)n;h^@2B=RpKApm49#S
%YtO@JYuj9l`?S0]0cR!9A2#7'II$u@d9PKi8eZR_V")!s.ce(T(YsilgJ"1T9VE,:?(R0;CFa[faD\dFe6r"iS8j4@>&>OG5?+IE
%)](tNI3_Wt1/;!U8Ni=@/YscIW_7o9?E+'TBcuDIg)Q\(<Q,JjXD#aK>D/'OkX":FR)qJpSS=asTG_G93Y?LWFaGB!+*lr[=g=\d
%@W\!:.UK-<Kq.1/(l9#l#'dL%dMH,^XnmV"R*+E[p`K_A?%Z@>CoR!fqPoGRK#R7GrKjnefPM=H/8K4O0ud&(q^/LRiiWhjq'>FY
%i1?D1]tj#4.l5PpN;u(b"J[J#>+,GY(s0g?$<C)b,9/em>1e4BM)F!B-/W7<[M=&\m\@DK\%B]$/)"uBIRD2=7*9p3-N"pigL0A3
%D3n,9Fec.!Nd&(4<PVGf6i4GWH2SOKJ+1rF*2*\U?ZmZXWo3,IGD<r33>G.!.hahW#_bFl,U4%q`\nE?N2[R]/"I9YZq3-]IU,dH
%qJItrOk2&,/p_>bC2$<,2):!/RFE@"]_5S!5]9:I7AuaJ2UTIsLe3hEL2rur;Q@9$EP)h#OtH-76fCF<YB<LJ0p'\/_37\RlZ'5@
%i.>TWVNVO0E+uU3P-6)(DkFu?bE<d%IP<YFhS0Y[6C."AP*Rm:XKIM-=;KW]-lo!\Uk'%0AcU)^QuP_B;E!L!'$;?hH2gMk'o:MJ
%'>P)[_%o+bCMoUDIVS3SaO7eITs6s8A3esj$nE'N$Y8P[E4p\&j[dipBsToj,Z:4U;Mo!LB8's%>JOMg+!am^W5Lei3gs2ZZth_H
%c/`X/62%0cl%Jb!=(GDG`6Quif!:ndH^nc[1ds457ej0JAj,5ZpC2%M.\sDsM*6SPh#DdEYoZ)tUG/)=m-5Qg.4nt1[UY^AnW]MW
%\4mFM45qh+WH`Z;_BK_o6=VUke"CeW,.MYPUFXPNYU.`knN^U)U^E.H[R1f.@ad_G$0S1q8Gnia9bdumRO1R)SWjKGM&Kqke`_r;
%1o]19H9%(_M<K@2pcODc.Z'ZnC$XqbA@b*l-dif:K?ZL*ipsG*`KH6e6aW@1Xl*1L/p_dcj%.3>*-\d2h'QV">g!Gf,or^tDOUV6
%hPoId6jpiR#@9PhNT<aF6=&Zl`84p\aK\]GU-6b&6Y[8\,K=<@`]uV$)Ra-9*\;BTcD&_/$sPZl3KU/Mj`0,N;t*aO&Q.UJ8p*>l
%gdb)-;>_?T"!JM3_'GVX10OlcBX!a01m;?@Be=7AXpK`*,>oP,N])^$`=5]?68/l0c"k>K8.JF1_AaP+jh:-ig6+#>_RkX6eY[ho
%U(^)L9m]J6<jgl"-nL.n**QL\9Q+%Pbm%RqVGkS`QmQ#*Z:%.-50YjX"lB.ka@n=fkYQJ!<je`m`!'a`H0/l^&B":-Bf+,`c&F:?
%aXi4B?Huqg'>]4$240e)19>/OgD*IK8VTgQnUa8&#9qfXS4]b(E(>41rsdaT7=t6g8OM5R;]/?)<$^>1CH-olEit4k7Coq:=elOe
%es)Jq3K:,9Pr'>1hR@M[pW,V#45*e=ZK2O1[^E?mH_@.Rg0,%1]DukSMe,bN<tNrS<f!JA`>iI-U[Mc-1b?WR;&*muftD=#d4"0Y
%l_nE4DD>"7>-;m\<7;tZm,9JW-#]9;G6Z]SG<mRb1.=IM"WoY&6D?=leQ.`EdArE-IB0GZV2:bt7Xe`FNRX,j.VJ>mE$-GDm0nZo
%'[%bZWg[R.-ujf\/COkROPR%]hOmkTb`jLkgb$WmmW<O)m)3kNfkI0!>(N/Hj2S:T2IU%Jpbg6lD6'mZf;-u,$2Xp"C/#;L@Yoch
%`c1fa?^1M*IP%r*EElH:a0<qba0AM:77A;RV2h.l*NPuoqOL@3L&RY5)$O7Zl^Y',XN.SCX]]?BiDs_8;kl77NbV"<Vu_keLlL8u
%roD+qI"u.mS%21Hg+89E4@@%Nl:1!cp,&OE<XJ!]@;OSH>]p4ALqd@q6gr,,@SYt;,f-:$^)uG8c0jfd^\Yc0ik-#:6Pc=(4$[4_
%P/E]r2U'u)`>C"pFf0K*qlmll^k,#X.)0MUMI'chr<%KJFoM'kE&/GY0!MGu\>lYEad%fbdk&a+XJ7U^OdhTJd#Sn<6Unc2$?[-M
%qq+,-4'EZa]g:XjL1($HS4d2T.Pl@Tp'SPp2JH&7R;nU-/k!(b%=-<aG=0JI&41>GlC\:E?WVQK'((E#.hnt=h2PN7*dG/+ik;s[
%*a00:iARNaV3GXjc"K1&7)VjEM)N7[[4U\QMWmqf>#a-]&]V`oQ4e$JS&W6*:O8&e6F[L^W^VW,^VJ#4rPU)Jr/=VYQN]ca;=1d\
%+FSlZ&+#m,fYi?)'3Lt!4gkhOgZ>sJlLa)uC3Q;*Oo,3'd=ae)&,>T@%NVGL8$HDM/20":-c<s+*)`R^8n8FJ&)[7XlTD3B7"'Q%
%hI.488Xa9$VYT'eMA4+U!Qt*4)GL1F?GWQ$B\Bha6DOHqlEUJt31'E?UQh6AWi^bh50tR`\<;%FB(EYn4ll?A&ZolK_u"M5=k8K$
%R]>:OHVrbFG>"s\s-t.8]r_%\@*e'L9Ab`*YO-j?%UIZQm@kVHe28iQhKgjPi9^llfb%ifQEe%+qZ$jOh3re">.?_%=h`Y?%Gf9r
%FU_VL$*bj4$mV,<&Lb%eq,Ma:kmP'r!Cs0'81[J]di_b7q4^e>qDDl']@<tFHQRm,MD_Kd2Sl\MejSW"9N_k>,m1?mS--(8dU9[d
%ENLtR)P\qNda2m!HoW%0D7E'uRaBJHCBR3Z)YV?W]H<RpCg4ZXY)N]hPNaUrn9-+[jccPGCBAEKJ?P2c8B@k=O1"4nD>H=>AC`*%
%2$(E*.*Fe61_D<RZ2N+,ZaGX#V-V^<L2rlfdsZTAO7sGlO4iI^XfZ^/$Yt1C.F9I@g\j[F:U!\$[[8#d+fu7e+rkL3mcR#H$I25t
%4aS0!^+h=3X2Njp_MNecD@NC%?a!if3hX?pVg0,K;B-IT`mgYd!D1Sg/(f;MQgXkN\Elk=d"s/rBRB=!@Pnp+VDm=[B=8r)o%N7+
%\6ba$A?5nT,Zg(K"npZc#ec05*:Jj/6KJXsC3aZ""'O,lD,U#hUdf3Q4%V]@/Vr;/iMV*tNh4taf3f?X-hG7+m2eIlA-R2SG8o%O
%(&%PkbrI3#Jd+tH&G<Cu,G]3\K,BW4!PAQo$kFSlW=FNmWJJ%*/9c(5cg%Kdn.[A=[=MIaAE<31."o['Um+co)U+H81!F\3G^";D
%n=&a^QsGHA*o9'Uqd\;JYYc]MbRJB\?/4SL0MU)pO(Ji!KJU%M*M`(U9EBr+JZ[nAb@ZFo^$]QJ\u4iq&8%UH3o^E*S8-IaSoH1R
%Y$$e/F;tGJ*BR[9%u58I&]Q.8!aSJuK+:j1,uQ4Q)r[I#V%.hs4SqIE&q+SZ8R3o'Hl\!>9HXWnBdFW#2di4]1u.aOZ-l!JTEf(u
%KYp,b1Vj6%A^'D"?l_^*,WEdrjF'o1f+,F3'_>h=UQPN`="CUd1u9XL]PtAl_C>n9A!.j`-&@'t.;UO\D%aZ>BGC^-4bAV,qu`E_
%,H&BRm#X19$R..$`0'RDH'(nh;-B%d9</gNLrXHKZuDPenOha*4d(`'S9SZuP>kSESL"T_-4sFTP!iruB1i8r/<10m0cQPm.&J(<
%"ZVW%=9+%bQu+A5J6oI>fMYsREi'EVHEoXa2#9a)`XRnC_RL/aHO?'.Up22rGG1**$ALl`(hj8oEO%<tL4Ua@&h1=:\'-`D7;s5k
%4#p#pM09&$'Ek[<&>+PTMOc5,JPVCGLo33H=@i27@5EUJTJTthlI4NRGaY2H8ugUh*;RBC)SqAd>:1=S6aP?3\CbnYE3X,)k$eE(
%/iLBd>[1K?R(*3.fU;/h@9<=nd$jrq;.oa#V72E`hfZoKWNCONq0Q&0!ZR4he7p5k,]hGS'gSkZeN]<*RjM.,Zt$(cf?4e"_fFNd
%7Od^c;KRP>;5Q"36<\DcL7eaAQ4`oE(A$;jcR[9O%>W?:T`I-rD9amB#HoiZd@`.oh_=n$pHJ_Smgi1J6X65L*/T(2<m/D[EBi.I
%Up!I;!\niHhQ&MJbA-om_?SO^QAm,4ese,7/RAuh@lE.sNQ!W>mLj>)giA$EZ=o#G_'BJ%:e?9W>VlS(SI@A47Ue`XF;X,/D21^Y
%KrSbM](mFUlIqkHhf_Z;iMQLoBb&HdG2=i?]W&qI6c;3!8p]5DeV9R]-`&^`8'?0.!dc]OL9o?\lF`c4PiW5XI;bteMkY;I$SiU[
%2cXZ33O#]+e!q/B;(j]QLkZ\Q(AM.Hja?ej<u,]1r%Aj^O*<Ol]55?c!6L\G%\VSb'-cE5=H<b5i>Ph*(34BQ>7Fps2HgMJLG4+K
%<*n6%j6S2#9jc8bkC@sn'J2_]QsjWsf78m1_@(N6r_pjA]I@HC$PZL]-cFQQTfjCB`3Ija[[pl"![=pHN'85E`NG"<dFSHe*q>&H
%JDEtbd*YVqZ&8>c4GVRO#d6[P<^#oX^cS+YoGg.)5qkfh22bQXfF\.`5Y32;_TUu/,HG4Yj@m$U?pd/5*H(i^Rb#Hr"usRYLllk_
%OqQ5jA9>/N7G(^4@J\%c3]fqo-](to\e]I+,&ufqmMU_Qj2e\c8*e+(5(l-CkO:0O71Cag0rb#F_."h@-e3@tBN@+M-T"W+Vn(u3
%IrKGV@0tXb8\8\H(^nS5#J]2A8I-Z%o9>*=)`Z!F;,"/H9"E'b"YpO/EfgEd+qt5M'U>UoE@N!W;qqfH"Q&@&I7KDDp<;SBOY&$b
%#@Rh!4`?1.q`#V<h/,M's"-Q2#kplo%"qNT^kT4B(']XFlXuOD1KREr8Bl]W&L>8&)PQhT$*c<"#qnm;QkJ9+_lb!;U,QfZOr!R>
%d49T36f7sBOUr&NgQokYiIO%T[Kk'1M#oJZ3q>j^>pUq/r_Sh6`3[DEhakCI]b)XqBs+d!*<kKbctAJM4$c0-!+_\]0guRH=RP<<
%cr.5%cX_-,..f>@eBr`nQ)1eE\8T9Xb5T?<SP]B!M-1gF,Qt?.$M!MR>!I,g4OP*c$G+(n'RRB\Y,<k9*he*4@V6lde3%^R90/:N
%Un/5?YXJ4O*8lc.*KHf),rsZiU;S6%]?hjeEZVq>c+FOKB_$[GQ2kaPUc'4tm%#'j`,s/u6ln2fq1(1-T!7A3e#l8YP`1P,TrnLO
%0A2TfNZOk"A@.GV(f!(A0/a8:DBNIjA&]!KEoAMAUd])+`CB1H$(^*Ej3f.RlJuQ;_hak6`6C*/PNHHqg$OPK#DhFue)pIZl9R,a
%$7Tki7)uaOO16QmVHSa]<Ld%nE_K+5a3,Y"!_7m-%d):N]u[<g;A2dW&:]g[C;fm6Vui"%KopVsr8j_K4:MRLI>*^!JW9tq90'81
%LHqV8E?bbpP08\C(;i.1>2PZn%hUsTc>h3MLQk8,o/9'+\&%#/V'?Mr6kG/r0QBm,?GeGF%X3RNUso[[9G#\l,Y1I2a7km?baj4R
%8dW#"%*cS98@pLla<C=,5d!c8eF].OJa]c7'5>5/Es0fdK!`jhC^N0TJY<;YQgC]Rq,U(X8O;u&kW"\`9WsRZr66qI_2gnK.D.uM
%MoUY]!`'dZJJZBT<WFNb/32<L?s>LOoYr'^!ZMB)AF>0IB*uM3)&Et'8<I%(KJs'1k@j3Gl+H&%0;ug#a6$=CU,+^iWp%Xm2q"r3
%":iECk9u/5`5+Vk7:R-_/<fcUd6Y!,()dM(P=&+m\`_-;]NbG.62,)*KQ_tm3c_^k7*"[,\sVL7-V]R>W<1,?,EE!urGqN7d>)dA
%USPp*(CI9%+K,Sj:%E]8'-2R3=2HNB%YAD?Y"6mdrC\Cp15P-VB9LG8,6]%2&./_uc1/m<kRGqUiHgTFY;fD&GFqWN$A%LL,o\6$
%"18`8=e2c_jLMf457D1C-n>3U;HT<;H:jtBJltRH>t^=>#*,o`EQIu_,.];D,KC`E1K/shNq]9G3C:a,01";d+C5-cd'dB$qk[,I
%j$X6Q(KlLB*,Z&B$k8;C4_UQ'HcRJ]^,DN0X`WXI758'V*!9=>$OlH4ks5FbE?mQldA!6);=bt[h(WR.aJ&>5@L#[fV9Le$\D^9H
%IOq#M=N@'q@fJPr%aZTcF1rV:Q@[$6;aX>XE+ni%Jqm8po#6u[W#E12J:gH]U6-?`d8_;YmJ'bN+Bh+i^h1S7#Wu7H<<+r#"W=WH
%rPDVCA)q%ToJ!:ROKJ%$'c"V/#+?gV1;J/^2i2A_&KK>*irE`%qH0hOR6,uD".[=JW]J9gRc'2>"+`e4-FFD@_2AX0'*7'gphC2h
%#b[XTDK+UG8V8l5+s"',)Zc5h-aaS-eg*&8a<7"Yl\!mt36=7BC+%ppcad;89C\-a1i$,R!=+1h;`c-tR$`l$J3YN10aV\JT:"Zl
%9V@$WKk`e^%m_@N6L&hEZCsNrgT,<M;G\$a1<bJ>66o%.'2kW>K>pYWXOi<"JAcig"mgn1l_N*.8<2Io@OT$YQ(/Zu#[3sg,?kMJ
%PAckDncu1L=Y0ds1NT>!']<Kb]ikaLQdC\+.H%jET<+lN#)Y#\Q9sThU1,Po50[>14/QQP-P[OZ#0;?lLImrK=<Xm`W,$!&((e5-
%%;IG]eeV`rp$QHI(N?e-4KH"XDpb!]#S@`?RL=p6cmL[ei:!+e[215hEE%:9!\g[cJ59VVLq/$QCa#dk5]]?G[%^r:0d*JaFOjn<
%7hd*N"3s<r&T'(ROe\n3`K4\h)CQ@gRV3`r('Dj_nNG&u?K4;7=Rb#)7iW=FKjc]pM!d6ZacKkWSAf$[0/5k)11Wce!h)f;"IG;g
%PJL)2-3F79LY--.0G_<g$u)Ll=A=O78;gl>+n6j"A0RD*r%?COa_"'`>*Ee-gpn`O8_@Vd(2'*[;>a$A)/su\(^rCeM$>/^+_/G9
%a4`[_#&c&I`/!4&@R0-$1]^_f32eJ#KhVd18i@P27jMQF7O5:a!&*.bX3lG77tXa8JW=4ECG]E&K.RTN%E[!o';IhtV(in8-k`_5
%@/>5J7KY+o:W@.j!'"K-C;?>1C,JhTOeSnoC.O@e8#unOp)):o8:cB!)lk.@FDapU+U-;P`G.Z.PTa21JH@V9C,I8iPkSoMA.AmO
%2&bt0oP-5@<9?0>eW;+=BPjgT`55pZ$!'E^8`#?T0_/AjC,Ls;jLn_+5fQZuB6qrS<pTr,.f'?4.;[_3^9ANq5a'aO%654MT\'\u
%.tYcYTYN@9g'p"PR@Mt?j&e-FYo?1&;6er-YW@.b(Q]h!N_UC,3K+NOUKS-@Jrr_fO&(%Y8_.pLDus#KLP]pUO@ad+,d<9e0FaiG
%Mr?@8MLI45_rU#B)e1j$**$>SLPbI.&Aqq.BF*1.QoK2T(_.4>E^qu,-3UXbeo7!1+=B#dVNIV(ZJbf5iZ&QJ!>TT`2h5QJk"BPI
%M8^ld6iKcGK!FEfN'=6&O:h4>=j(5?VHGL+S/OG>=:T#f3*OKK[iV9kMWlhb@=L$Q7]^/ICH>.jQ&=gV2p=^,3_98igL6W:RMW4L
%Lg+IK*q3dcJW[H:DH+DF3e@l32',4NF(pR<5WIEeb\rS_@Q`S=E2<]=1Iert5R[X_)Wh%BkVI1g+0>!_,JJP4)iTOa[hTB!mnh7X
%2BG=`Vio_Z_">Tin%sBA1T_r@lX=m?8[9C,2IaUN(sN3$jo\'t)hKaccm!p>qdG.D>[6Nt+$c55e:'[[34ETJJ]`a\0@A\Z`UWNr
%h>XkUK:d7DX!lQPri,(.J'@=:_8Y_F%=/Cc>IWSg%7dMSd/S&C][ubhh9YlU(Vc(s2\h`GY.K",-1<Zd(a>Eq@lGp9I!kuOOJp!%
%;'/%%R`i.=GCP)>"n+'MLY)7_\BR_Qr.UTR@W#SGdeM=j_n=Etj*n%hH``b!]k577gj'rXImO5Zq/uf+:or-/P7WA)Dl)JT:ftcJ
%q4gMKf+H!$VST!Q:@l@nG3%tIVu*ONI63NkJ/c)K#]#C[Wk]MZ<.ikR>!FLBS,+?(FR+Z5UOc!t.YboGkQWZP%;d6^c)sg[H_g]s
%n0ZEA\=U>>P9@5,Quku_PCPFc0U(g>>O'!sUfffUjH9u4U_,%"R;)/s7g_9`oosBUTE)-T=4kMHlTJ+YlZqk*+s!^JOVe%:)BF`3
%#S]iR9uL4DfH`0(9nHLp,`)dnhV`521>gH4GdmhXEO5u+MSoN\8c@a,%u<pe9kL19Z3e-U(3M\nD(s1U?YaA&9oAbcfiGo\jc_S(
%mQ,u[/8[YG?@C9,E!u3d-e&@5Q>E!4%:Z]3-:k^86<aFN(,(_H$ddT(g&MEAk?Lsc4C?*+I4V_@N,GY;Eejb#3oO@CF*Kd>VfC69
%=q3.':u.hW6^b3EpXD=!e/h]&7U@Tfm&(,",FIaP/D07:FVj(7WfI^FO^dNOp$(=$5M57JR(Go2ouGM0N!1#8J@9(Yl[;KA#D"^`
%NWO&$*<r>XbW%#q+9S;oK8]r^%V6oQFsnT/1k^ejD$V-gg(JQSPbsP9TP^B4@8Y")eR__*njtG17Ye>T&elSm#JO"^%%fRt1,:jr
%b,D[I/G]PtR9j)+cP<qAg-gQ,2c/__HOA5A3?X@Ni_@k9?GUVXgu:r@O]OB1?5Na!&oSPQYbmCU[."<Qc-q3$rD6h"ZS?`\:ggfR
%PRMr,>9!r)nG+[A<F#>n5uBOEBs'`sJLX\;I=<RJbNi`%:if@jB^pjOE5'$0f'ZJ)N"n2H7V\>dYs2tah\aqM'=Pm8^tomGirDI*
%FH]+kM,UsV3AYM#Yh'Wpjr)>+=jFV`1O7T?$ZSjcUWK$j]*<NK8KLPk,4E]HS)EA90RE2-8Jd;+KgCY$$FhmeHsGpZ=5G,d/V;rl
%16lFlTHMqS(MI5Zo$FKmF299.9q_mr@=^B0aAP&GLh5C+R^__ap#>[,3p9LkZEauG?_ZB)H.)KKZ_bN=JjhVE>0IHBn.%JIbQbMm
%;E/1Lq5BkV.mon6*p7paLT<2ZGF]fSW<$^Z9HAei0@:M\\W31fY=lGm@,A[sPO:"O/3T`E=d/pZTh.hKWBn&8=LNY+euk<.Jq^0q
%bNXD,EgaBn"iAg=JZImhhU6[.p'n110K6tPFnT%g<3?j;;L91J(0sXPgCG7DC1l&@OopDVZh[8Z\kCK%2P2H8g+lBCWW8[]oAt:(
%>OBqi'7lePfX:qTP#;!jM/LurReC@,2:bSr10a;^gS3qK+Y-9qQ<TO*65IXWqeDjp]nTh7iYn>q`@[OUH,olWhQV8$0\\7<d%V=N
%H#kD2b33"Jm;#U.V75=L\*qRmghX3.74bMGO-L2+*"cBMf%+93c^.OD+hKpM;YoD<%CU#$]>Lf=4>XD6Rm6uYa.?<ZY^eEURSk.u
%TY_gbR!=PA6C``)$g!^THV!$Ba-IYa2t+ZSJ[3Q!#7(\*Uk\nWjDVJV@-qD>7Gn1tdB2([8eNkEf#nC'\7]h>9>9"8ahXgH?Pb6t
%J?(A&YaLr3!-h>/k]Uk!FkP3=XmYrc7r8N<QB`GnlZ[u,YGaa)]WIT:&P<CRBXk9_*j"Q%AD7?i&\YO'l([FqelC.cp(0=jOojNY
%=*(c\/a-@pOeaS!aTWGl!C`3Smlo;!V%H-j/lPBkA$l4UL=Gpa_ZK9Pk9#CJ"B*oD1)`%p/iGiO/4B9SjD'TVOG0O+YbXl0h,%[o
%JZ7XVY?0t#<\XTJWTIp<=`iGnV5QsUgJZNYhA.4BAL]:f7h$,If8LIh$tXIeAM*+\RnAj4VV:3A+fj0uOr4,o,mmY:ak8M/ed?SZ
%OXluSm$cnS"+MbS_GX9gClk'VO;NL;l5eoj]QVNS]LQ`'$Pkhr%gdlb^h<r+K9DKNB7.C/oKq(LpT<q_AY2<u[Eiq0mmEXZ(/75%
%#Nh]HH;hH/['XrH;SFt^UPK?BCG"'i>9ZH3i()61QFG_sI\u7b`dk"YQc1]FR*g7OIdN!%8e9s\miSlDoB"g$+"jj"_gg?n1EZ,j
%eD61-hTQnt:_D9f_kqR4X(L1cTWQTt..RmD<@V1WTs9#p1ECc6nb"jRJjZ('s/(8-?grSRK9q$QE+;I85EQRmkQS-Q%Atg#km&k0
%MumTbPdhKQ.E""FB0H`TfQjY7_XYlRpfF;Rhl-n'^qY<.R?3bnH6j3<Ei,"L'f,Sbb,,T%X?pXH8Brlng%[Gp"iH0l@FZ(iPPe!3
%Bi_rZdGRYEIR/!HaKK[g8i,!3r0,QK=o=,]Eh6IGP$Hc0VS$n];M3Y+f'`:F\Uae:17Y7#+-Aj-e>nb-[XMWd/quSel(#JLeIl&q
%5[M!")2Cd\q*5:!!#$WGj@/rA?E%_JIPjRU#&+kP`$KGq>.Tkj0e9KQ>SgtrkbOj?@e8>B]DUl`1O.W#XI77d:NRVR\uC'En(cT&
%:Gt\e-!ee/JUU61@M-mhO;:#<AZ16;;V%I,hbd>ur21+K@Sl:?!?nXoKTE/bFO*H\Kp0q[7'1/D+eNcDpb;K.Fqqf8Lmb.:Wt2Ju
%M?)+;[81\_S(&4UXW>Q6:Ul==$u.7a6EcoCLoMj>Xi-D.2.GOj3gVNF/mbf\>!('+i1CIN<kM[Wkq)6k66j7-s.m#M.8X>2-$P(-
%DuQa/@@iu^`8HM@&sgPr=&)PiCXr[\eg^(MY;t]-CBBe5)p&Zdf+uNTS1EGg960UWP(1HMq0<lGC!oW<J(3QLgr\qn*-hL.J+`5U
%\%R+?>s,M6P7E$"FdL%X0`Ak3@cp,QBtKQ3fhHl,Ho`DlK^%nMo?s^XDYgq9#lA#,IaT`(oW=e(q&ioX1_uShLs=o4m.ThK.9\Xl
%[-2F#"`SW/@b5b%`?(hO@>.N^>c>VA9Vj^==(;F/g_K\nW$Pl+cF5;ugS-/DdcPs2iIK]%?pVRHS[Q15b:BN+BmbRo`>\5i%:i&_
%Vt*)o)FV"1pqBUb:?pCr$PM#=rT)AK4'D8B)lG3]3bJ0U-V"Y(9=B^MI2j#N"1,&9p>sZrUjR&(euna"3pbZ<ct`gX]GBj+5l?IB
%F<?053P.nLS(9h/rVkHG6kno0@ek`!_W`0*'_L+0Lk`E8Ba]g*X1XOEqnO#0fco<dajS0G-;c!S3XW+-T[sA.)[\?k33]UgU(KRJ
%?+9qkkkF0=-^o<?V6XtMHJZ9mHc]DuKhONae@q%JQqZK13_[\"QPA/B4PECu=s#ca"2S:[Qu"LE/!71^A045!U@#-aQmq!5-aLOL
%?He\,@fa9G+OagC2O(o+nhSTaO1it?dsDk6,q/!f_LSMZ9jHd0<f_=_*#_-FjD$I"GR<E3fBZlbS2Si=NS#bY>`0g;kh/8il!oJ?
%)nu7:H9^F&]81/>o9b@JAk81/M:C(+a<0$&9'5HmJ8.Qmr`k$P:D_nOm2e0HpD::Lmk4$P[u[m^B,+)P5s3+oMN6"Y-9<C"]2.2h
%f&40>&B;i;='LQ98?UQkGZ7AkGgB.)\bHE!;JoMim$G"RaZd,fZ!8n7UrFel_TSlf,i9k"bJZ8h4e8(V@E:8c4qgQ/3YDB99bcup
%/X[)GNkBs%F4`Sp1S_9:3/<t_Y#!&sja5^VltOk>8de1Ee#aJkiolA(oV-EY'CTbU.DA1TS:0=ZMMY,/c?)LP&*8gc&0_>pjqMWC
%-o=>k9YfoU;Al!%R[_G&^.qEQK4kucl[hJsY,P&b\IAeG$Z6pVV(McbPM<\0Z=%E<>m:eF-$@&>)7:r\?+KS`c:q:Y?]lj<aV"Y:
%8#.Was%QM_I4eNNN#B#QfJXP?XboX$'<bE0&6XWd"h)o;gU]AYKiRC>a+:F:3Jr/@i<-<+IHIWZ$:d.0bHpk45o)rTND\!+#<IXr
%bPp(\NaEspU#X=F"5Nr=o<*%#Kug34A5s%"`3m\u`/_bJDk%($ko;AeVUM8SPRH]Z"XVQ]^Go;R*RlmI^X/[LJV+K+TVOZ\ERkSs
%s$/FCrIGFJ),VRPQ=+O8^1:Z.1TW<N+?"%'G'&V4n%WHId2p4GHu`<B"!;LEE1hZWp!(Uc#7?m3[YKOSPkI@%]J8(4a?TQIf(M@F
%$(nRf#j?)W6juAb%>&s+7W"3:4i;nhO"bRd#&]M"#%Z.)F<GV.%2/IZ\26`MFA//C,WQ4(-k-5=`du]-V*T'jd49^*'1H*'m892%
%-q:%(;1q6n)]E35.\RHQi@4aqVA*ZUEA!5!,E3&nB1!jEZ-*Gds$0M7mu"uc9UZgAD$[Cu5Qhb2h.DOjLJunim7?IfJkDO^oDn;A
%*%@InA0QH_6eMQE!SAqlibkDiVnsiuK*HjIM8M6uLAiSb\QkTh-.pkgf>UYoVjYiSij(si%64QJo8_6;3*,B=CXCmu[Q+ofALPfS
%*F;ZY%]mW1gDl#O_/W;u*5b$)..)R>,=Bp$#aXFAHf2^1<8)uAHSk,@YXEPH%ietPV*,BUVf18kd<11@gB3".K!knnl+&50EQPLD
%E$RlZ#@`n:T^@:\"Di/#e^7LS+,SmoD<2sq(3=R)ADk_^LlFsBPs!!p]3<-!cMAdD(b9dr5=6"BG-Y2S:!Uj;%X_fA%MI]!*mFs1
%$7jA)%tlI.%FHt%qSFWHQ?M>LL6a2^nqeRo+>+ijF`=.#p5ol>0R:c5;pI4E+NeEP_Wd[InshU//'%i1r?SL1Zf.jbJD&B*7\I:k
%)ZeD=3u%4?VW#o\!_q.t#W.1#7\CX5B`pKUMadt8j5EJKZ=BDn7_fK&e"D[3i#*WE&YdK\g^'_-"?L%P7Nai^)M+-;?lFT<(i9CR
%Db;6^mVOq7Zm0Dj-r-Hm!\%/E,EUo]NBfO-B`ul;RRY@0Eq`DQPY*GKN,bA).j,Bo/?LUHcqS3X6lL$lZGLsSp`nY1q;Ui9bPS?p
%a/dt`?G0f%l1Oa;pVja?atWFRj86m#++LfW4`nI6LYKF*h9sL/Qec;hs75/uo*1f9[hhi$s75d+0>=s+fkiqAIe!*]c+E;4-A:A1
%2GR;aTao\DMAn?[h+/Y%!G;!h^Zg4;j[CM9o=*Q<(T4mSq(IkulW&f>?qnDK\DH=J,U0u#Q8%@pm.XlShYl4-`HSq!P?d6;f0I'_
%1j/T[jR;riDt8CmcMr=_GJ3h=p-61',iEMMaWeig?iODHcl>KbjKYS>5SfhWZ^a^N'JiYJU.Q>:UAO(0q"1&jo4t=EB9J0i_E\E%
%M0.]e_</.W(73l`Jj5\Vk&a/cC](7?_l!@P#t$-uoS[g$/XB:oqrNi]2b?b'7W"9bVAleW5!-L$<pcrWMp*8)o_+oh"\;gO9t&BV
%f=ND%`]pHL.!6@`al^54Ws=h`hC7uj?)hTlYBJMU/\`+?'Ail_fl&M2n*b-?TtUeTH4:<.G^FX]q/7%D!445-n=OmuO-5BM;N^>m
%8>#kS?BX5:D;j@0fY"i2\@TH/)-dnU\_Su$*:bO,q1[0^gi8ddm[d#`q99mU]CrR\]"6'p=%edES8.q<k;T#]EHcQ?ffa5]f,(o_
%5Mt[LFRg7JhgUpVg2=N6g4JAGqtn!ph$5]NU65nLs*USHnt)@0@EHb'o(e#)eiLMMc[(n/nZ09Wr:/AT:UcML"6`e6(L1>(4l*lb
%cZ&.`8bE+3#P&S!a7kq(G.4Ys#eUC@PHs>cUt`iFT9I`C*YmMcmua/%IIfBkh<+^rc.0dgkZH0:L7IOt;fW[;&,Uo?mmAa&r,MLu
%R7`*Hf+TBW^/=TM#"QEeB?'u)q=Xco(YHXbj6-.@q7gb&X_1k2]DR.#s6X<9E?67VhI$6UVqo7s&<sQCW-?oZ,G-;O[Ze>X[or10
%H<uFT23k^rrShljhoiB^MH8Co():E76hTg&=NL_Wod&`WE7DhI\i?_]N;SSR<5(NTr#?>cHAg^lD;(ep#bKk8D$Cn!/!j!nB7R'o
%"$5*er!X!sOr/UkIgK?rfDg$aR&AVMG3N0g*]Nh3G0b(?RiL+B0/'8=ccTK+,HK[1q:q^6oG,46MCrU72I5+PfjAiHNhBS##aG4E
%ld%i*T4nhdZWh&g(Qbc&00KEpHH(p7bAFKbe^XI51\^Rm_kYqos2Kf\Ss;l]5/j=@4b*>)LRW5NY(>_b&o^=I!.Hcql'j?0TCSnp
%^V>,ApT*&XGF>/^gjQfhLtCRo=RH!7Zb:j7pjVgqGB[0jq!9q`Dk=7sT)1DnfPNVHq;$J-j592]2g:<aDf[B4>hnN<kRfW0cehr3
%DP^t[[D^0uIro++?W-!W?`U6:DkA(c3Vra36I)bjK5LB.EoOM)I;dDpMsK]0n*VjcI=HD8N97XOanM:#rV1qU+^Va+\B2;U+m&G'
%Y](srmr%#Flr/9=cVGmC4@%hj\"N;c&D__`G^i#W4(PKG]\7pL[t!1=hn=@AjQ/=Z3;,XL";d,#ffVGp&h<MH.a,m0c.>`mO/?4O
%DVj24!(Unr]u9@WOWm%cmk15MZ5>X9GeE6hp<>8_IIg*X]=J,b(\^/`q`k,CobVgjG4b@Ys85@7rd=<qY9,Rkml$g:q<%N3-[:@F
%h-RnPr&c?4s8L&slR,7XDgq5W>\<U'nV;>ZobY[CpD7TZh!?(8hIOKQ49=m!#l*H!rRJlrf=S51Nt4GY,6#JophR=ThpsWNhd9[(
%ag7tB=g5#"R)SLle[J=2l[DU$52WQe0-;h)$-&)%.sL?dX41%+4<GpAZbO&!pu_/3+fib8HQ]Seg&H3,60kc4*VA<WIsbSq1*8^X
%<%E_bI/Y+/r'W0YFjKFN"Z=AVg?RET9B>R0Vq4nV(Al<pI<YLBh4"r,n+Q2C:b2GKekN.DpZ-peO9Il1_=Gf>C?tlgp.t]s1Z61D
%e`HfaVE_*%f6:$bQb2Y@'.M<n]fNPHs6r;e?\L4F._aVB>lS@0r.ihUmMT$@X`H_/Wr..E.Y#$UoD&7hX#$U!s28XsK^[OVqq]eH
%hg\bMrWuUs.Gq>X[s*m9+agtMqtSqC/$`YL:qJiK[Wcp[SZ;'Yi$U:nk1SsJnCdIf2oY]KLc6pk5Z5OC`nZ$`^RF,1qtBI;rlsTr
%meZ@#j#6Y3D1+,"GP=0Fl%<]b/Y*\@6K0%[l72lW9PFe-@+oPnB%Hok/U-0#FZNn/J5%)'2@imh.X67[e4BB&ina#dJ%U'<B&=:K
%)>YQ,OQa/LO7/Y]2d]iQ4RVX@rfn+6^=ka*>sHk%/iJ!(Z[;KH"$)\FTH00\,ZPbj:2eup*A+5)\A!8kJ8Qt\rZDqH9$=i)2cU5M
%rmg0+l1(q'V-ViBVK;^um55ll\%,Z0.G:admOfT&?[R3O-2.:,CpMhZ4^MLOmP^-5)"F,\&!-I/J(Q?RZ:K@gIJ&WUJChCtB1DbN
%\(V(-]Y!&am-an`gYDaIGQ/0@^k[=r3ToIb=o[Y`DU?EG2Qq=S`(gMSYhXu"=KZtVhd;j[Hu\o5HuA`Ep9#1D\[iLl-93peoeLmM
%.bFMGItiZ4h;csGZaTB"ieQ?<fbgX1/i\Y^f.UWh&@Ps=S(HP@T:K4l_c<8phq,=gAfk*mrpP;YRO]\@^WD?4QCIN9S32;u\^L7I
%f5H\SjmQ"$'0U5Sr/Pt4*[O%tQ7GA8l4G`gO^TX(<;j_@pCW.:Y+UW@=1AIDV]-X+bTX&6G2U.'#.f@6L'']crH\Y-lgAU:r4b@f
%.dssBa1Z5*gq:M;8W\]d"EQac-t(0WG+0O3[*>0b,Bcc`11HGiJR!AK73)1[W=\p`B8S$PpI=q5R4b`_/*+#-1E@K/2ANAQ9.1=;
%"&b5=!h"#WL@Zj17dSA+k<Jb,W`QMk)K9Y0k^BU_aJa.tIL(MG`*Q`23TFSH*c]aDE+Uk<ghDA-.L"gXge'Xtb#j4:Z*bhS*a<?"
%5N"G>S<(co;f^!15cVjr$OcUUR'GaBargfka.DQ'lEMk1:=QX95>b+7;&Tjrbcl<lMIBlu@_X*3/ktX\A&S=g3$&939"E4M$reWa
%H49sD"rpP1\8WsD!s,hj2eh_sZ5KPuiWp*u@AA`_EP!XQ[X_2"3gDE:+;fa@Og*(2GG,lcDT\[],:X6fKA3ND/2R"_^WKZV*bU(:
%Cp=Kaok0>D#FX9e`sc;!3,giuEsI@/"E-tU`D(nW#c6*6Bl&?Ggh5cKOq(R)]p]La*'l;7$P-o("b9;%!L!8P^]maG*0!;i]m7q;
%6VN`B5UO&C)Xe0ti+s!#5bQ_JI3'NIdIkl`_t?&$kPt*7N9A$<\@0lpUPq1u!a*;LEos;Ak8J<k-X)Zu&Qa%^T[?Ub+p5ae*]*43
%`O3"HAbH-ZMK+U)1AcTc$$-1gE4b5UCko.c^h,jAk`S>""jXX:(>%*r?CD0`8aK-;+4I+`:a$qs#On\b8h(eq6YfB*F`r]J!f#rR
%%snBd\<$h)LNBPIjP_mK">%K#-?+6P@>FDTO&NoG%>i##L1*IK5_mt2JKU/s21-J>9Od'4"LoYm"u`H"&YC/E'mdH!][U(-BIhji
%mfns_f/DVH>Y)IM7KYmp#94sU^']g@5qXjfaX8.&a\cDl\ui)$\<-lR.+i(?2/&ZQT(mt#Wn?@#^^B)pnh^q8l#J5*J7`%rN`O+"
%Ifa1q6S-!meqW:+ru6*m6i:aWp!!Otif#<OUW9S>#bu4/Hf@AlOA$qF%FN+eYh'$$D)I`O)<-%LfI_c4?sEi(EDe;B._=M"/n%n,
%%M]1=O"6f/dHh'TW"?NtL9N06bjFF5W!\Jd\KH[o`iZA."GL*([3ZO\\uY3uEgB0HfI_bi3*GPXl)`cboB*BODuTS41;?q:6D+hB
%5b3C`LlM1b0&W27Z(FTI7`9>gC=$(YTtg_8A/JqlZ5uLN$Xi%j`L!+r9e><TSe8FOe(ISM9d.T5)qND523l'VkQXt:eD_0A85_R8
%l=Jd(Esq4rU0RGWLK8rB-MIr2Wi$_ID<Cs-,M`a!4#Wk3O`)AhpSLL"-nO?R&-V8HLo:k)9@gr_OE76\Hm-*pP/%mA)(Z+LAQ>*q
%Uj/-dA\Cq-J?,elc,V=SW5=*5eCLm@.Bn=qBlUE8.i^%1kko@M3#o%=M1brJ`r1E3'bc9Q`A,n@SjIH]gseF1K1UbQT9oa3V@'<a
%<L?Za0NH8^oqP[q8(Y)^$?T2o.JYq((Elrs(2u\k%beV=>5`tu57I`H*&(_<=MUolH"/Q(UD`#uC2j<rfl4D]NpbFc3):D$)L\eX
%.7D:W3"!ccH;S6n4no"bmYnsq5LW?g7&%Hu,ZURRoXHX.6?)[8<cNtJ!ZQDCWL*l<;i!E,`@2pBK-HNABG75;BX#Qn/VjF]Q@bdV
%];u^+iAF12hXLJ7UYX0/f*l/#`+dd(UTkH*85F=X["W&D1>q*$N(eub`\&540:53K[Yu&G>+S&5GsL=fT1RSnb4Z$<JXH!B<iJtj
%Q1AMb(=FbnU0ef2H2-EQ56fE'7%=i?i0NarjOl4^%A]=NYC_q-3A5W_BUL$!C2"#@[QkWtRm[A9.Tu9i^m%haKciZ[BjTALL\?B_
%M'0H?&SPV8Op`g/7jUMPLu_B_YMqu::1R0e'5*G+V(dTg+AcmAdAEWGhjq_c+LS]d;jn&j6M=aIW63$%UE85G-:]r]70Y1LU4MD?
%cM%"-"]4+aRQW/P2a>Rq)aq4,4Jbb(9`P_4UBmT_.$:GXB_8tRV%B>tU/6H.[:38C&X[U:jN_a);L:e%D=ZTnKnTO."g[.]$<KA8
%?pY#jCt*uc!Wrb%Tch5>b(qBBMc0n>VDOM'/?'hr<M(k?!ib9]Qk37/'tX-S7s2fdKnEkZ>b_#OJZk+.'c+(Y&JC3e+DOQVOPD@X
%$jZsQbt4S&@)Bmh\;IPWV\%q4L1c+uV5Eepf!E=p+JudQ.o[sp9)5cA#A#oI<2@<MHVP9T%:[/#nJ;`f7(?5DdK$7p.f`nIa>-=P
%FB(8a_LdNFS'L[WAI3kj69gN@9nT&0(pX<>JXE_mX:V1`.a?/*/Yk@ZK-tYp0^t[03,T\-VRaPd*elWYP)*Tf)G$G?-C.F26nZq_
%`KOp-B[kHE,'j`rU7+X.EYV@Ne?TF[&0tp=c-)Q\8Ae0eUrZF2,3&F"*jDtD@1X#,!gUGk\AoS?&1Ss(Vng*&,DS6>##hsr&m\4=
%aqG'O_-]jA>=jO<rnuY8QjUcr=($`^JuMS\X<1*E&Jrs'!^1jqj<!iE8E:.0:rJBF-^[09[/b/sW/0%,9,uB],0IRU7gS?WS3g=M
%-!]\I;W1*p@Bu7-Um>(j6<$6Mkh`@GO`"Es3/'f4:!dSg7WOFBhg%Zte'L?6B<e=2@6M/$.\]2%?K.gtV[sGX\0ok'b$kb1g/gZG
%?qMrR6B`UnF>%E"Fma7q/]mg[_iEk?_f\aM(57H++I3X9>2t,M*Yj9_Dq+1i']B8>rDaCPaN*4h8;gCPnn$!!cn$NJ@7F?95?CM_
%U;\!HTh,hr\sKfd.*ll@#`XEBX[Bgt!;hPkVSXH!-laCU@H#0`OPCf3#>q)rf!Bb)R)YQ-VR8O?Yf]=tePs%/L;n/J<$AZ^$7f()
%VFpZiILE-Hj[.8.F3G1D(*W=Ee.8h$+=j=ONJAPe=">DtCS!C;#3G(Of6\Dm\FpXg>RM2NZ=V`[\2e=SJ)h2>e6ja;;d=kgRL5oY
%p9J]ii_o1Yn1-qB@DNEi3N4,.K<1M59nA!`,.'\V,%rJXM)[,Ti!gil?-6(ObGn)_852N-DJ"g+5YQG,<iAniQ1AMb=qqNRLn5Kt
%-sd7]ar,$,@;6qK+(i.m6\m1qB>F`NaY;"0V,E+LiG'iBc75[m1$'-PTh7%>b*Vd20fL5f4D'7+78h^@n2Csh!XjF.[q[7iBPGdX
%i!f$V=qt/XKnsVV0F\^JW>*@UaFcHh+ds*./t9:/'OV8G:naao.298!6;<5L&k?;&]LI+/74#,9)<V>GYj12OKRgTj21Rf8AmU_%
%0Z]\#='$,)4k;K3^07$lEkWtCOYp&NjZWt[U'dm=<LD-4n0lh6FZV"s#LD^M=P_nl4KCd\2]<JLU]U?RY^GS),HMG[Zk:PU5Qe->
%(d(q9,OJFQP'=@tL7+>69,c6p%2OAq"Y$5Y;ih]FgIe^^)d#"-4j#jp6a4/jTP>k`U0ns4qTl\4[t.4\ZRFt3^i4ogk0JW.pC5^%
%CN0D@0(FhK1^NA;.h)YVJXF:]XH966.bW"f/LE'QE]m3Zl;7%4gF+UtSWIH'h\<l)/fnB_2=^e`,^H+m7o:^-+Y8:XU+*(cAAj92
%TU&SCKc\338R>H!(#?F54Ab00F=XF"jUooa=j`5.2>409`jK1s^!6Y7!#Mcu<f!$r23l>FJuAZCBa%ON;FHf<AaNT=#6^;4`7SQQ
%$Uc[gV8<;B&eO4MDAqZ]$:kGd`_s=^Ed'tI7Ok,U%mpuRV)X$2P);@6?e/1Y9B_#I<$8'N!`Pg#U-eU[FsOq;\kJ-4KOT9;1V@d>
%[g?l<#=S;s,%0OMJ6,sr^`6QP##W]IPprk;gM<01V0J2[G1r#uY)"R'(0=p2;o)D2?Ik*N4=\)j?^d[:%\o%MKajf9;U#-MMnB,L
%Gpeqk"nc]^<]&/\E:Z=H9HhKS6a3H9@9PB#LafLB$;HDWP.dr%2)_]WKD.B[@ViVT@5LYt[3I".;XY%4X%?f/4YIdV9NfGe*G]Wr
%OKfd>^hF]hO`%C:$H*WZ@"fjp<68HINlQ0pNh`[+:aa_Z,Yrr@69cX3lmOBbOG+F4fFO%:<FC(P,)WHf1f.:];]#Vh5]mRK3D,aa
%\`>3<BF;Zl<a^WWJk2kIe;T/;*).\fUPc2THSNUFX0?#%?r@S`O:hcU<Kn>&cN:!gU<)#DF'=H"a<aCe7t09_$HkAW[[7E?PZM6b
%PTm,L05JT1H*.Mu@R^i01"%?hJn;![0(G%JAg"cjFqobNAk:%$$1#X9&SlY!&J6.D4H_,W,**ot&5uhf.8bu$d(NLBW\]rl\Kq<H
%jLNQ=*(W:%Ck+O_?&1b7LiuuG?<mO8f!@$8@Y1G3J>0G6Kcj`04.9(ki37A]A#bVo?A0,o'N:iU=[1KSGeZ^K;k\F\OD+XRjb@\[
%i1GTPn@Q3FErk-jG3a`emTa-Sea?[]HTN#t+d_1&U3d[\Rg@a]L1h/J`"Z9]6BgCX<:A@3X:T7VNu`#GhD8!G^bkk>ltoS"1j;IC
%gG&I2j'<$ipGNEh"FCU!RPce1/lq^)N+-p*?M?@VeNN`>[iks>MKUSMrD&_0Um>(j8l`],.::Y%g*BQY8*l=*b=lZGrIL:lH%?;!
%i`MV.fSt_n?jaeT#d93'-H+a]"3D3.LL)mCCi<2KiI\#k/N9OdJadE1XEnS1$=/\NTSP(jQ<%Ed;aj[L?Ik.k_dV!1,#s]$L^:-m
%kP1Rg"mKPf-+6L+Y&4EZ9VX:F[I@M3K&Bhj$Gl]Mm^!8<%O5(W'bbb9Gho&:MdusQ]caZb;Gtn;Ns8O:eFG(_WN)<mjidKlRil(1
%<Ce#e,Al/\$<%qc_Sb4;aoe2MR*(F$ns^#Gp4BM!(qVWG#H/3fa>"4b.23WmHB<ucQtS8]fkXc_6=e7FHHN$UZF@MTWfUCjJJG0l
%VF()brVjRsY%>Y6gPC<0ra@\hOt;Q0P0M$*:9kLq/Fin[5]D<gm(e\CpVTq-?FNFd%'AlemLc@sG],NDX?'A"GG8?P'0J$d`(O:W
%2LJ0'aS\+?"Y9ABUln.B<3\FDTgcST2?MQMLf-;9gCLCt5XH+7FE?ZE:Q^E#XH0Ys?:])^l#Y(NE_10EI=AYh5?Pdh-BE-Yq2;as
%gaEo#m).94n[><+AAA5AGNW'ub4g8j6"ip+g/BCu5a)`L`[eFP!e'$$9L;ue_UP@mjAt/M`h8oN$^Kre&uY$5]b-E(;@KJ,$eLX$
%`LJ&$-);\jh"6Q&=CF?^P(X&9B`B1N'Z&\#&7hq+CB(/%&1:&0,^k]`<A)BF^X%tdUj=XqBW&'VX10d'3J?E.;oj:r\:jSr8?k][
%_RAji/LEag./cq5)$)]sP6k\;JrO,8a=\d#ckVpNjDrK,gUq(&QfO\$ak@=D2bYnGY#n,];^R*LY+.EQBmqN@XQnIr,b97q%=P.H
%K!EF#/t.ES4r<tI"Z_aq3T`f!+Lh534.1/\$tt6(,X,)E6dOtr@_t=;!:59&q$G_=6R0M&YlU^8LsdnI>1FEcVl@p)K/l(O`#<,H
%UTcAjJ>C@31W[PFdC4rq5F,Hg8"(P)TB-XAnjTch&&j43,g[+2q8XZO7l%SufT(ic%eA*4KZ#_[^V1psi"1@JrMNb.d^Xg&8WoDF
%#`jP.*":V8`A0($1`4kME2_hN(Ok`O5X3'L#3P]B9/\90Hl^4%>`E]#daIC^_gk:3:D@pO=g^JYIWSnC&;.c&Pb^,=?1Qf2!mYPi
%59kn#c;CBj,CpZ%RLF>EhJbNe<lkp6'jR50+3%=:irGX:r$7QG;+I5>i5j!Z__@7M!L:?H&m@_X2:1Euq8d'2C*P(.[Ts^41:pel
%LuU<f<['sbYJ^`K;EjmK03g#f;fKd3(=9Ajm"@Nka0i+kWCBLbNWY7[%fXZp38@fh$0,,!nZB*nLUge71&nBN8Uln?E1[:qB73gO
%fcXLc?UYphjR>6%NT:.\nH"b%JEJitRj:*?$!!n9R(+=:&HICG^a1*06lF65J*\gQK*P\4.P$+8ktKluK<K.W:MC*Lh9r*,bsres
%#=Rh2V>Cu>#i@Cmr*]e6kGUQYOQ+A3JY,5=s&k!M\=058QO%d@2/=9>b-D4jkancm2ga\s_b&j[/9s(.6.%^4H5Lj?/VK?b2L%oO
%Y4,^PkZJru8K"CFn_6E77E?rEW0:F@LBJ)fQ$n`rcp"J="BL30g[$#;:>rFuUQE8[rtaM5WhR@s9<\oei1$(`Z)eM^a!#O^>(:er
%^u_"2.A4/gUT?]*J;0<a-#%KTk3]UEcYAA:*d;b+%,T?RiVN@QQ$Xh(.JM)7j<]-<CBq!H6nY7)I$@JBE(Buh39@Fjq-giS%1h5D
%G.$u6+]`>H@K&&->"]qdNC2tr<^UD/:o]tX]mV;_0gKPEpo5H2Ma_W:&ha'6=3ngB6O`%A]'@2C]rd?lC[6]14A?P@)/1"mVf1l3
%r:Pd0JRghkNSFTUYj()c3kT6Nc.JD:X>J7Y_F7&lY;>QZ3$,0#C"aa)M/G^Zb)UioiSe9HgJo%2qup,EB-EVg^4:G;j:/p@^*id%
%Rt.`i(*#S(4FhD?cLI,B4??TS(UEb?>jR18-rXHH-!W5ii`F$gAZP'(6XBmlj:VScLU#o1n3ZIIOM8pBb=(_!%3$QmhjD=2,#NUr
%NZnkIZ9tdF\0qqc?Ur<.$]:.oqg5`:n#OHs4g_LroLa'2:cZ'2i_'$IlOV,C_>Q5R8rI8?+cXULXL-r4f(Q>$lt'o2i*AJT=ZI+:
%@,l,ucif0DI"ENTQ-/i3)[\>9F70N_gQ@i"5)qZ]Nj]]b#G`4X#;^YO+*e+Jh@':dLqkP'g:!&h'i*?:WH">1Q""IHl98('>:oXs
%ELd.s=J<#_dkGb&Ur_79JJ-f)GRAkR4Ndam>e(]*/&o_W-:s4CI=[ed/h&?dcgU\SGAhr]Q4T[Ejrc2tV&'OTZn@aja$;U6A47P;
%=2*kcO5]:V_%85>P.OA^p@Eeu"th>JWfKBY@bA?iGR@#/X4K4eq@)?;6)tDeQE-h5o4(U,bD5s?_#iu@0,_YbJoGl,pUuU(:rI@5
%0#7Ug`cm(T=I[?r7nqcAg9W%p<$-`9MBU-GI\KGd/"!`dBC<*@OcFCM?,h;)bS(HaV@Y<:e^t1\h7++2f=OV1E8gZ'_.Z,mch+DE
%kqeC"qL6&D5ZAVr+Gt"hB8X<>P&T*OgkMc]lnbCZ?-?_;,]#@nY@be1#-K^-h4gO*!=a\(?;g;f?'P]sA0>EXP=Rutc\uITZ&LL%
%>9VB&QfElO@r=rE%Nf1D,tX<F1L-DuAdh'ZnhFa`Mn)OjZ]1gLBB23NabQE\I%6??PH\n$%^r`r\6(uUfHI@BY^UAX6AA#^'T\^a
%cP#MS07ars3QQp,k;3+Y+Jei\lYS%],*>`,W%rn8M1dX3Ln!^>mZZ)SO(Ng-)Q`L$6FZ&lGrLh']mA)Q/YTkIYKeG0Q-*WO>s]jp
%Q;,#jL<tip78s+FC?df+,WVUakX$a'?P3[8OL1D'8G\W"3Pm6fAVRgigZ0mpVY@8K4,W[A`"+0UNXX?/`XY0,/FsQ:R-rsC<Ak_6
%jB8"ZI[iQ^)VT6U,WVUq(lD@qmB^i,4%MpFBC$l/1PDQ#=r!gfEgLm?T7.5s'Jpi_mB+1_O9nXW@6qeU8JnV[Pa"<4LBl`!L&7Y,
%Pf3tt72RH23R^KlMM^5b$?Eqhn^OD&Y1t0+%#BKSCL*JSU`.UY)!,fn8Zua(?cGds_Y.7,ot[SM8F7]ugRZY[?ueVPQe7W-'JQTd
%>ZPJ$N<1I5K1TRDH-iB&&hYRD<JNe[$p9m%G`rD"^BE6M?(3!rj3]1q'm?(>=0m6Y4$SoPbsdJcP.M4(-HfR,"*memeCYhoJSS`t
%RH=c%%"55fo&[8#k@.9JU#rZM!`c5DPc1@<6F*Yj%m`d<KYG7W.[(R4hrbeL1#^Vt&H,$ujggUA/f7VtH.A"UQ:Q$_nB)e@F)Qs'
%YBlqOh^(-63jn*Je1&3#VNtQ:R&NT7&E?;Zk*VWKK#6mOjFXO!=i.StC!hZ9n?*WULZ:QiEf^?XK](F#l$Sc##,:X68s7PrCt>M[
%:D'nOd'bJ7lH6C?6&rIdKW.fl8F:jh4(it61G338#/+I4nRW9%dt,-dV8a$G4:*I\=O7pd$tV]`U7*3h$HS4]Y0@N@71X+Q(8De;
%"GER96=4,4PtNmMn!!W"4iC!rZ![tU?.rb'(b1G=*9H;Zmq$%j6M1cE4NA";^K=sEP!Io@O-Sc-4A4N,&8J*R_I_3+LHG\C'']NS
%UI(+_I[cmp>RG,MlZ$+-quNJ38(>U5e:f@>aM<@5hRgQ7Xq=:?Lk3<iZ%W>r.DYd+7[7d`76%'e,U8Dt'U[WbK#6[I["?I2+&)H1
%/JbbE!lK'/Q8n5r&_2Q)nEtEn,D=[JBNTq>j;eBp_UTNuX'381*]94T&X!Pol5Xi69MjAiT:L&VY<n">Er:$-qkX^?_'ITV'^j[T
%(heJBF/KWt&MVcsWhd>@N4PUD5"2tDQ$Tl$$F/77ZQr&(50)G.QfOIikP#@?ERI=.I3k[PcO7?cO@67='P<u[WL!75#m$TfcZ!8i
%=u)^:&lOEMJl6I^):Yq/hGtY;=j`F+#paTrAeqqMYkg78Y9k@::-D^JKQ[c>"GS*FG)4qg5Xdj\+cUVuXR9,jZEmAj[/I=gd[SU]
%#g$919Olem6a0.ec_8Gl[mh[R^%YYuJ`YlWADh(s(Km5r3l;#mpk9._ODgQ8@E4MH*Yp<7;62Rsj+:ZMa&D<X%+2X-X%1N6<](kK
%*(fE8F/)4s\Pg?6Z\rsCP*nM\rfuf<0t[Z&0<>TDPTi8W&<0GcY9m@Yg2b4:a\ep>c-./Ykd&3//NsLFddobd+^(@GDNm^"_sapY
%Gf*mnJ>FjCV/:5!C5u"DUaXGAl*!IO7R7f9A`W@',KIV!Xn&?X,]rWDX??+m6M@E;h!n7":3i"58Clsk>@iu7o)&@;p?,=t#_a?n
%g\r=;E3@!0O'.>U/-n<hO@#jK]2fJ)R"P`:Y^Y<k8G?n&Zk89S\.ne4WKFn+j@E23QlDlR_X@<f\?)CDAMX&;d)#C/(#A$f&."Y.
%Y=</cgOqES6:fR)X=-fr"ec68Z24!9#!suH?W,hAU[WVqOTdb.e2cY\\Kj-35!(B8N#g1Goe9Y+&;TOP?mt`t1:P545sk:&E_J!W
%<".j(lR;rGbt"8/iV@1JXq%;il^4[-%U=qp8XEq)OU2Aq+(n(>d];<ab81?fJ)q9gcak[26A$pu(`N=3`'$>5;L9E0I/2bEiGU"J
%qDg&*4]WsW6+9s)qh;;l?X"e_]o%Ks9CjSVs6G3ob81BlIiI@n>?LJ1fjCP7k@30?m&Oi(I.+0h0I4;Ve4,W<7%Y*dCjW%uM4pd[
%R6_W7:JE2GQKele<r<X]KTD;iHV'6G::_E#K3V"cI@o4H./=Dr'?l+6cBsAKf?g1k@'YP%mH1k>W#5Vc?S\Ga6_k`]#+&:*7tj,o
%FLT's*.t++janIDl5Xl?<)D4qT:L17&iU1mSf/QC*f$'2(^>-j)%I*UHUl6bg*.tc`j(FAg5lHDf#87,l8(g7!1.lrdnpobmuK$A
%&_E@'[43Gijfdk1X\'?iQ<rc-H*F<B>G+G?,iI!l0ZGI;[Y.W2Ts8m!@f&QGidrFI)tt\-MK$V8dLjeq/T>%9R3VqKq>rIR6BYQ%
%T:a`H$T"j$A@Z2[n)NT)&J%,L)X>_RC>\hP;!Z`T"#+OEJ##HBTM,/[LGhM%l)MuqIFL[8hT1igancuuX*SkDV;\o*4g'G-0AN&$
%:KPsf!&5&bbWG^Y^A6SlJ,f.r2n\iZXt)Ns@X"n5p=Y26rM/7q/Jl:^ZKn^nrpJP8s7kR/^HT=1iQ\hr^AIBrVg%$Hp\dnVIX;$d
%rBIf<l,TF1s5Eq*O8o.WImE_"f^Q)YqX`VDo&fs3d#)H~>
%AI9_PrivateDataEnd
